
/************************************************************************
 ************************************************************************
 FAUST compiler
 Copyright (C) 2003-2022 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation; either version 2.1 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 ************************************************************************
 ************************************************************************/

#include "compiler/parser/bison/transitions.hh"

#include "compiler/errors/exception.hh"

namespace Faust {
  namespace Compiler {
    namespace Parser {

      const std::vector<Transition>& transitions()
      {
        static std::vector<Transition> transitions_map{
          { /* State 0 */
            {
              Context(
                "$accept",
                {},
                { "program", "ENDOFINPUT" }
              )
            },
            {
              {"IMPORT", 2},
              {"IDENT", 3},
              {"DECLARE", 4},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8},
              {"BDOC", 9}
            },
            {
              {"program", 10},
              {"statement", 11},
              {"statement.definition", 12},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.declare.metadata", 16},
              {"statement.declare.feature.metadata", 17},
              {"statement.declare.doc", 18},
              {"statement.box.identifier.as.tree", 19},
              {"statement.import", 20},
              {"statement.list", 21},
              {"statement.list.start", 22},
              {"statement.list.start.qualified", 23},
              {"statement.list.append", 24},
              {"statement.list.append.qualified", 25},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 27},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 1 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"LPAR", 32},
              {"DEF", 33},
              {"ENDL", 34}
            },
            {
              {"statement.definition.assignment.operator", 35},
              {"statement.terminal", 36}
            }
          },
          { /* State 2 */
            {
              Context(
                "statement.import",
                { "IMPORT" },
                { "LPAR", "primitive.string.unquoted.as.tree", "RPAR", "statement.terminal" }
              )
            },
            {
              {"LPAR", 37}
            },
            {}
          },
          { /* State 3 */
            {
              Context(
                "statement.box.identifier.as.tree",
                { "IDENT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 4 */
            {
              Context(
                "statement.declare.metadata",
                { "DECLARE" },
                { "statement.identifier.as.tree", "primitive.string.quoted.as.tree", "statement.terminal" }
              ),
              Context(
                "statement.declare.feature.metadata",
                { "DECLARE" },
                { "statement.identifier.as.tree", "statement.identifier.as.tree", "primitive.string.quoted.as.tree", "statement.terminal" }
              )
            },
            {
              {"IDENT", 39}
            },
            {
              {"statement.identifier.as.tree", 40}
            }
          },
          { /* State 5 */
            {
              Context(
                "statement.math.precision",
                { "FLOATMODE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 6 */
            {
              Context(
                "statement.math.precision",
                { "DOUBLEMODE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 7 */
            {
              Context(
                "statement.math.precision",
                { "QUADMODE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 8 */
            {
              Context(
                "statement.math.precision",
                { "FIXEDPOINTMODE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 9 */
            {
              Context(
                "statement.declare.doc",
                { "BDOC" },
                { "doc", "EDOC" }
              )
            },
            {
              {"BEQN", 42},
              {"BDGM", 43},
              {"BLST", 44},
              {"BMETADATA", 45},
              {"DOCCHAR", 46},
              {"NOTICE", 47}
            },
            {
              {"doc", 48},
              {"doc.text", 49},
              {"doc.equation", 50},
              {"doc.diagram", 51},
              {"doc.notice", 52},
              {"doc.metadata", 53},
              {"doc.list", 54}
            }
          },
          { /* State 10 */
            {
              Context(
                "$accept",
                { "program" },
                { "ENDOFINPUT" }
              )
            },
            {
              {"ENDOFINPUT", 55}
            },
            {}
          },
          { /* State 11 */
            {
              Context(
                "statement.list.start",
                { "statement" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 12 */
            {
              Context(
                "statement",
                { "statement.definition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 13 */
            {
              Context(
                "statement.definition.function",
                { "statement.definition.function.declaration" },
                { "statement.terminal" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 56}
            }
          },
          { /* State 14 */
            {
              Context(
                "statement.definition",
                { "statement.definition.function" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 15 */
            {
              Context(
                "statement.definition",
                { "statement.definition.assignment" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 16 */
            {
              Context(
                "statement",
                { "statement.declare.metadata" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 17 */
            {
              Context(
                "statement",
                { "statement.declare.feature.metadata" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 18 */
            {
              Context(
                "statement",
                { "statement.declare.doc" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 19 */
            {
              Context(
                "statement.definition.function.declaration",
                { "statement.box.identifier.as.tree" },
                { "LPAR", "statement.definition.function.args", "RPAR", "DEF", "expression" }
              ),
              Context(
                "statement.definition.assignment",
                { "statement.box.identifier.as.tree" },
                { "statement.definition.assignment.operator", "expression", "statement.terminal" }
              )
            },
            {
              {"LPAR", 58},
              {"DEF", 33}
            },
            {
              {"statement.definition.assignment.operator", 59}
            }
          },
          { /* State 20 */
            {
              Context(
                "statement",
                { "statement.import" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 21 */
            {
              Context(
                "program",
                { "statement.list" },
                {}
              ),
              Context(
                "statement.list.append",
                { "statement.list" },
                { "statement" }
              ),
              Context(
                "statement.list.append.qualified",
                { "statement.list" },
                { "statement.math.precision.list", "statement" }
              )
            },
            {
              {"IMPORT", 2},
              {"IDENT", 3},
              {"DECLARE", 4},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8},
              {"BDOC", 9}
            },
            {
              {"statement", 60},
              {"statement.definition", 12},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.declare.metadata", 16},
              {"statement.declare.feature.metadata", 17},
              {"statement.declare.doc", 18},
              {"statement.box.identifier.as.tree", 19},
              {"statement.import", 20},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 61},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 22 */
            {
              Context(
                "statement.list",
                { "statement.list.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 23 */
            {
              Context(
                "statement.list",
                { "statement.list.start.qualified" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 24 */
            {
              Context(
                "statement.list",
                { "statement.list.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 25 */
            {
              Context(
                "statement.list",
                { "statement.list.append.qualified" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 26 */
            {
              Context(
                "statement.math.precision.list.start",
                { "statement.math.precision" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 27 */
            {
              Context(
                "statement.list.start.qualified",
                { "statement.math.precision.list" },
                { "statement" }
              ),
              Context(
                "statement.math.precision.list.append",
                { "statement.math.precision.list" },
                { "statement.math.precision" }
              )
            },
            {
              {"IMPORT", 2},
              {"IDENT", 3},
              {"DECLARE", 4},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8},
              {"BDOC", 9}
            },
            {
              {"statement", 62},
              {"statement.definition", 12},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.declare.metadata", 16},
              {"statement.declare.feature.metadata", 17},
              {"statement.declare.doc", 18},
              {"statement.box.identifier.as.tree", 19},
              {"statement.import", 20},
              {"statement.math.precision", 63}
            }
          },
          { /* State 28 */
            {
              Context(
                "statement.math.precision.list",
                { "statement.math.precision.list.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 29 */
            {
              Context(
                "statement.math.precision.list",
                { "statement.math.precision.list.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 30 */
            {
              Context(
                "statement.terminal",
                { "ENDOFINPUT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 31 */
            {
              Context(
                "statement.terminal",
                { "ENDDEF" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 32 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 149},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.function.arg", 226},
              {"statement.definition.function.args", 227},
              {"statement.definition.function.args.start", 228},
              {"statement.definition.function.args.append", 229},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 33 */
            {
              Context(
                "statement.definition.assignment.operator",
                { "DEF" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 34 */
            {
              Context(
                "statement.terminal",
                { "ENDL" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 35 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 232},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 36 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 37 */
            {
              Context(
                "statement.import",
                { "IMPORT", "LPAR" },
                { "primitive.string.unquoted.as.tree", "RPAR", "statement.terminal" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 241}
            }
          },
          { /* State 38 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 242},
              {"IDENT", 39}
            },
            {
              {"primitive.string.quoted", 243},
              {"primitive.string.quoted.as.tree", 244},
              {"statement.identifier.as.tree", 245}
            }
          },
          { /* State 39 */
            {
              Context(
                "statement.identifier.as.tree",
                { "IDENT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 40 */
            {
              Context(
                "statement.declare.metadata",
                { "DECLARE", "statement.identifier.as.tree" },
                { "primitive.string.quoted.as.tree", "statement.terminal" }
              ),
              Context(
                "statement.declare.feature.metadata",
                { "DECLARE", "statement.identifier.as.tree" },
                { "statement.identifier.as.tree", "primitive.string.quoted.as.tree", "statement.terminal" }
              )
            },
            {
              {"STRING", 242},
              {"IDENT", 39}
            },
            {
              {"primitive.string.quoted", 243},
              {"primitive.string.quoted.as.tree", 247},
              {"statement.identifier.as.tree", 248}
            }
          },
          { /* State 41 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"EDOC", 249}
            },
            {}
          },
          { /* State 42 */
            {
              Context(
                "doc.equation",
                { "BEQN" },
                { "expression", "EEQN" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 251},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 43 */
            {
              Context(
                "doc.diagram",
                { "BDGM" },
                { "expression", "EDGM" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 253},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 44 */
            {
              Context(
                "doc.list",
                { "BLST" },
                { "doc.attribute.list", "ELST" }
              ),
              Context(
                "        ",
                { "BLST" },
                { "ELST" }
              )
            },
            {
              {"ELST", 255},
              {"LSTDEPENDENCIES", 256},
              {"LSTMDOCTAGS", 257},
              {"LSTDISTRIBUTED", 258}
            },
            {
              {"doc.attribute.list", 259},
              {"doc.attribute.definition.dependencies", 260},
              {"doc.attribute.definition.doc.tags", 261},
              {"doc.attribute.definition.distributed", 262},
              {"doc.attribute.definition", 263}
            }
          },
          { /* State 45 */
            {
              Context(
                "doc.metadata",
                { "BMETADATA" },
                { "statement.identifier.as.tree", "EMETADATA" }
              )
            },
            {
              {"IDENT", 39}
            },
            {
              {"statement.identifier.as.tree", 265}
            }
          },
          { /* State 46 */
            {
              Context(
                "doc.text",
                { "DOCCHAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 47 */
            {
              Context(
                "doc.notice",
                { "NOTICE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 48 */
            {
              Context(
                "statement.declare.doc",
                { "BDOC", "doc" },
                { "EDOC" }
              )
            },
            {
              {"EDOC", 266}
            },
            {}
          },
          { /* State 49 */
            {
              Context(
                "doc",
                { "doc.text" },
                {}
              ),
              Context(
                "doc.text",
                { "doc.text" },
                { "DOCCHAR" }
              )
            },
            {
              {"DOCCHAR", 267}
            },
            {}
          },
          { /* State 50 */
            {
              Context(
                "doc",
                { "doc.equation" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 51 */
            {
              Context(
                "doc",
                { "doc.diagram" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 52 */
            {
              Context(
                "doc",
                { "doc.notice" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 53 */
            {
              Context(
                "doc",
                { "doc.metadata" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 54 */
            {
              Context(
                "doc",
                { "doc.list" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 55 */
            {
              Context(
                "$accept",
                { "program", "ENDOFINPUT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 56 */
            {
              Context(
                "statement.definition.function",
                { "statement.definition.function.declaration", "statement.terminal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 57 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 268},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 58 */
            {
              Context(
                "statement.definition.function.declaration",
                { "statement.box.identifier.as.tree", "LPAR" },
                { "statement.definition.function.args", "RPAR", "DEF", "expression" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 149},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.function.arg", 226},
              {"statement.definition.function.args", 270},
              {"statement.definition.function.args.start", 228},
              {"statement.definition.function.args.append", 229},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 59 */
            {
              Context(
                "statement.definition.assignment",
                { "statement.box.identifier.as.tree", "statement.definition.assignment.operator" },
                { "expression", "statement.terminal" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 272},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 60 */
            {
              Context(
                "statement.list.append",
                { "statement.list", "statement" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 61 */
            {
              Context(
                "statement.list.append.qualified",
                { "statement.list", "statement.math.precision.list" },
                { "statement" }
              ),
              Context(
                "statement.math.precision.list.append",
                { "statement.math.precision.list" },
                { "statement.math.precision" }
              )
            },
            {
              {"IMPORT", 2},
              {"IDENT", 3},
              {"DECLARE", 4},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8},
              {"BDOC", 9}
            },
            {
              {"statement", 273},
              {"statement.definition", 12},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.declare.metadata", 16},
              {"statement.declare.feature.metadata", 17},
              {"statement.declare.doc", 18},
              {"statement.box.identifier.as.tree", 19},
              {"statement.import", 20},
              {"statement.math.precision", 63}
            }
          },
          { /* State 62 */
            {
              Context(
                "statement.list.start.qualified",
                { "statement.math.precision.list", "statement" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 63 */
            {
              Context(
                "statement.math.precision.list.append",
                { "statement.math.precision.list", "statement.math.precision" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 64 */
            {
              Context(
                "expression.math.comparison",
                { "LT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 65 */
            {
              Context(
                "expression.math.comparison",
                { "LE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 66 */
            {
              Context(
                "expression.math.comparison",
                { "EQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 67 */
            {
              Context(
                "expression.math.comparison",
                { "GT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 68 */
            {
              Context(
                "expression.math.comparison",
                { "GE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 69 */
            {
              Context(
                "expression.math.comparison",
                { "NE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 70 */
            {
              Context(
                "expression.math.signal.algebra",
                { "ADD" },
                {}
              ),
              Context(
                "expression.math.scalar.int",
                { "ADD" },
                { "INT" }
              ),
              Context(
                "expression.math.scalar.float",
                { "ADD" },
                { "FLOAT" }
              )
            },
            {
              {"INT", 274},
              {"FLOAT", 275}
            },
            {}
          },
          { /* State 71 */
            {
              Context(
                "expression.math.signal.algebra",
                { "SUB" },
                {}
              ),
              Context(
                "                              ",
                { "SUB" },
                { "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.math.scalar.int",
                { "SUB" },
                { "INT" }
              ),
              Context(
                "expression.math.scalar.float",
                { "SUB" },
                { "FLOAT" }
              )
            },
            {
              {"INT", 276},
              {"FLOAT", 277},
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 278}
            }
          },
          { /* State 72 */
            {
              Context(
                "expression.signal.logic",
                { "OR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 73 */
            {
              Context(
                "expression.math.signal.algebra",
                { "MUL" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 74 */
            {
              Context(
                "expression.math.signal.algebra",
                { "DIV" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 75 */
            {
              Context(
                "expression.math.signal.algebra",
                { "MOD" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 76 */
            {
              Context(
                "expression.signal.logic",
                { "AND" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 77 */
            {
              Context(
                "expression.signal.logic",
                { "XOR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 78 */
            {
              Context(
                "expression.math.signal.shift",
                { "LSH" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 79 */
            {
              Context(
                "expression.math.signal.shift",
                { "RSH" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 80 */
            {
              Context(
                "expression.math.signal.power",
                { "POWOP" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 81 */
            {
              Context(
                "expression.signal.delay",
                { "FDELAY" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 82 */
            {
              Context(
                "expression.signal.delay",
                { "MEM" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 83 */
            {
              Context(
                "expression.signal.delay",
                { "PREFIX" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 84 */
            {
              Context(
                "primitive.type.cast.number.int",
                { "INTCAST" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 85 */
            {
              Context(
                "primitive.type.cast.number.float",
                { "FLOATCAST" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 86 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION" },
                { "LPAR", "primitive.foreign.function.signature", "COMMA", "primitive.string.tag.as.tree", "COMMA", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"LPAR", 279}
            },
            {}
          },
          { /* State 87 */
            {
              Context(
                "primitive.foreign.constant",
                { "FCONSTANT" },
                { "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"LPAR", 280}
            },
            {}
          },
          { /* State 88 */
            {
              Context(
                "primitive.foreign.variable",
                { "FVARIABLE" },
                { "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"LPAR", 281}
            },
            {}
          },
          { /* State 89 */
            {
              Context(
                "primitive.ui.button",
                { "BUTTON" },
                { "LPAR", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"LPAR", 282}
            },
            {}
          },
          { /* State 90 */
            {
              Context(
                "primitive.ui.checkbox",
                { "CHECKBOX" },
                { "LPAR", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"LPAR", 283}
            },
            {}
          },
          { /* State 91 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LPAR", 284}
            },
            {}
          },
          { /* State 92 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LPAR", 285}
            },
            {}
          },
          { /* State 93 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LPAR", 286}
            },
            {}
          },
          { /* State 94 */
            {
              Context(
                "primitive.ui.vgroup",
                { "VGROUP" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 287}
            },
            {}
          },
          { /* State 95 */
            {
              Context(
                "primitive.ui.hgroup",
                { "HGROUP" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 288}
            },
            {}
          },
          { /* State 96 */
            {
              Context(
                "primitive.ui.tgroup",
                { "TGROUP" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 289}
            },
            {}
          },
          { /* State 97 */
            {
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LPAR", 290}
            },
            {}
          },
          { /* State 98 */
            {
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LPAR", 291}
            },
            {}
          },
          { /* State 99 */
            {
              Context(
                "primitive.signal.source.soundfile",
                { "SOUNDFILE" },
                { "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition", "RPAR" }
              )
            },
            {
              {"LPAR", 292}
            },
            {}
          },
          { /* State 100 */
            {
              Context(
                "expression.signal.control",
                { "ATTACH" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 101 */
            {
              Context(
                "expression.math.trigonometry.as.tree",
                { "ACOS" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 102 */
            {
              Context(
                "expression.math.trigonometry.as.tree",
                { "ASIN" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 103 */
            {
              Context(
                "expression.math.trigonometry.as.tree",
                { "ATAN" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 104 */
            {
              Context(
                "expression.math.trigonometry.as.tree",
                { "ATAN2" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 105 */
            {
              Context(
                "expression.math.trigonometry.as.tree",
                { "COS" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 106 */
            {
              Context(
                "expression.math.trigonometry.as.tree",
                { "SIN" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 107 */
            {
              Context(
                "expression.math.trigonometry.as.tree",
                { "TAN" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 108 */
            {
              Context(
                "expression.math.signal.power",
                { "EXP" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 109 */
            {
              Context(
                "expression.math.signal.power",
                { "LOG" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 110 */
            {
              Context(
                "expression.math.signal.power",
                { "LOG10" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 111 */
            {
              Context(
                "expression.math.signal.power",
                { "POWFUN" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 112 */
            {
              Context(
                "expression.math.signal.power",
                { "SQRT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 113 */
            {
              Context(
                "expression.math.rounding",
                { "ABS" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 114 */
            {
              Context(
                "expression.math.rounding",
                { "MIN" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 115 */
            {
              Context(
                "expression.math.rounding",
                { "MAX" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 116 */
            {
              Context(
                "expression.math.signal.algebra",
                { "FMOD" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 117 */
            {
              Context(
                "expression.math.signal.algebra",
                { "REMAINDER" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 118 */
            {
              Context(
                "expression.math.rounding",
                { "FLOOR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 119 */
            {
              Context(
                "expression.math.rounding",
                { "CEIL" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 120 */
            {
              Context(
                "expression.math.rounding",
                { "RINT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 121 */
            {
              Context(
                "primitive.signal.source.table",
                { "RDTBL" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 122 */
            {
              Context(
                "primitive.signal.source.table",
                { "RWTBL" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 123 */
            {
              Context(
                "expression.signal.logic",
                { "SELECT2" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 124 */
            {
              Context(
                "expression.signal.logic",
                { "SELECT3" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 125 */
            {
              Context(
                "primitive.type.number.int",
                { "INT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 126 */
            {
              Context(
                "primitive.type.number.float",
                { "FLOAT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 127 */
            {
              Context(
                "expression.lambda",
                { "LAMBDA" },
                { "LPAR", "expression.lambda.params", "RPAR", "DOT", "LPAR", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 293}
            },
            {}
          },
          { /* State 128 */
            {
              Context(
                "primitive.signal.input.wire",
                { "WIRE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 129 */
            {
              Context(
                "primitive.signal.input.terminate",
                { "CUT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 130 */
            {
              Context(
                "expression.parenthesis",
                { "LPAR" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 295},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 131 */
            {
              Context(
                "expression.component",
                { "COMPONENT" },
                { "LPAR", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"LPAR", 296}
            },
            {}
          },
          { /* State 132 */
            {
              Context(
                "expression.library",
                { "LIBRARY" },
                { "LPAR", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"LPAR", 297}
            },
            {}
          },
          { /* State 133 */
            {
              Context(
                "expression.environment",
                { "ENVIRONMENT" },
                { "LBRAQ", "statement.list", "RBRAQ" }
              )
            },
            {
              {"LBRAQ", 298}
            },
            {}
          },
          { /* State 134 */
            {
              Context(
                "primitive.signal.source.waveform.as.tree",
                { "WAVEFORM" },
                { "LBRAQ", "primitive.type.number.list.as.tree", "RBRAQ" }
              )
            },
            {
              {"LBRAQ", 299}
            },
            {}
          },
          { /* State 135 */
            {
              Context(
                "primitive.signal.route.implied.outputs",
                { "ROUTE" },
                { "LPAR", "statement.definition.function.arg", "RPAR" }
              ),
              Context(
                "primitive.signal.route.implied.connections",
                { "ROUTE" },
                { "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "RPAR" }
              ),
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE" },
                { "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 300}
            },
            {}
          },
          { /* State 136 */
            {
              Context(
                "expression.signal.control",
                { "ENABLE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 137 */
            {
              Context(
                "expression.signal.control",
                { "CONTROL" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 138 */
            {
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL" },
                { "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 301}
            },
            {}
          },
          { /* State 139 */
            {
              Context(
                "expression.iterate.sequence",
                { "ISEQ" },
                { "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 302}
            },
            {}
          },
          { /* State 140 */
            {
              Context(
                "expression.iterate.sum",
                { "ISUM" },
                { "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 303}
            },
            {}
          },
          { /* State 141 */
            {
              Context(
                "expression.iterate.product",
                { "IPROD" },
                { "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 304}
            },
            {}
          },
          { /* State 142 */
            {
              Context(
                "primitive.signal.inputs",
                { "INPUTS" },
                { "LPAR", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 305}
            },
            {}
          },
          { /* State 143 */
            {
              Context(
                "primitive.signal.outputs",
                { "OUTPUTS" },
                { "LPAR", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 306}
            },
            {}
          },
          { /* State 144 */
            {
              Context(
                "expression.signal.logic",
                { "CASE" },
                { "LBRAQ", "statement.signal.pattern.rule.list", "RBRAQ" }
              )
            },
            {
              {"LBRAQ", 307}
            },
            {}
          },
          { /* State 145 */
            {
              Context(
                "expression.math.rounding",
                { "ASSERTBOUNDS" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 146 */
            {
              Context(
                "expression.math.rounding",
                { "LOWEST" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 147 */
            {
              Context(
                "expression.math.rounding",
                { "HIGHEST" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 148 */
            {
              Context(
                "expression.infix",
                { "expression.component" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 149 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "statement.definition.function.arg",
                { "expression.composition.serial" },
                {}
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311}
            },
            {}
          },
          { /* State 150 */
            {
              Context(
                "expression.composition.serial",
                { "expression.composition.mix" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 151 */
            {
              Context(
                "expression.composition.serial",
                { "expression.composition.recursive" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 152 */
            {
              Context(
                "expression.composition.serial",
                { "expression.composition.sequence" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 153 */
            {
              Context(
                "expression.composition.serial",
                { "expression.composition.split" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 154 */
            {
              Context(
                "expression.infix",
                { "expression.environment" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 155 */
            {
              Context(
                "expression.composition.serial",
                { "expression.infix" },
                {}
              ),
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"LT", 312},
              {"LE", 313},
              {"EQ", 314},
              {"GT", 315},
              {"GE", 316},
              {"NE", 317},
              {"ADD", 318},
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 156 */
            {
              Context(
                "expression.infix",
                { "expression.infix.definitions.substitution" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 157 */
            {
              Context(
                "expression.infix",
                { "expression.infix.environment.access" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 158 */
            {
              Context(
                "expression.infix",
                { "expression.infix.math" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 159 */
            {
              Context(
                "expression.infix.math",
                { "expression.infix.math.algebra" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 160 */
            {
              Context(
                "expression.infix.math",
                { "expression.infix.math.comparison" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 161 */
            {
              Context(
                "expression.infix.math",
                { "expression.infix.math.logic" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 162 */
            {
              Context(
                "expression.infix.math",
                { "expression.infix.math.shift" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 163 */
            {
              Context(
                "expression.infix",
                { "expression.infix.prefix" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 164 */
            {
              Context(
                "expression.infix",
                { "expression.infix.signal.delay" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 165 */
            {
              Context(
                "expression.infix",
                { "expression.iterate.parallel" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 166 */
            {
              Context(
                "expression.infix",
                { "expression.iterate.sequence" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 167 */
            {
              Context(
                "expression.infix",
                { "expression.iterate.sum" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 168 */
            {
              Context(
                "expression.infix",
                { "expression.iterate.product" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 169 */
            {
              Context(
                "expression.infix",
                { "expression.lambda" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 170 */
            {
              Context(
                "expression.infix",
                { "expression.library" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 171 */
            {
              Context(
                "expression.infix",
                { "expression.math" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 172 */
            {
              Context(
                "expression.math",
                { "expression.math.comparison" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 173 */
            {
              Context(
                "expression.math",
                { "expression.math.rounding" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 174 */
            {
              Context(
                "expression.math",
                { "expression.math.signal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 175 */
            {
              Context(
                "expression.math.signal",
                { "expression.math.signal.algebra" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 176 */
            {
              Context(
                "expression.math.signal",
                { "expression.math.signal.shift" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 177 */
            {
              Context(
                "expression.math.signal",
                { "expression.math.signal.power" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 178 */
            {
              Context(
                "expression.math",
                { "expression.math.scalar.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 179 */
            {
              Context(
                "expression.math.scalar.int.as.tree",
                { "expression.math.scalar.int" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 180 */
            {
              Context(
                "expression.math.scalar.as.tree",
                { "expression.math.scalar.int.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 181 */
            {
              Context(
                "expression.math.scalar.float.as.tree",
                { "expression.math.scalar.float" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 182 */
            {
              Context(
                "expression.math.scalar.as.tree",
                { "expression.math.scalar.float.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 183 */
            {
              Context(
                "expression.math",
                { "expression.math.trigonometry.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 184 */
            {
              Context(
                "expression.infix",
                { "expression.parenthesis" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 185 */
            {
              Context(
                "expression.infix",
                { "expression.signal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 186 */
            {
              Context(
                "expression.signal",
                { "expression.signal.control" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 187 */
            {
              Context(
                "expression.signal",
                { "expression.signal.delay" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 188 */
            {
              Context(
                "expression.signal",
                { "expression.signal.logic" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 189 */
            {
              Context(
                "expression.infix",
                { "primitive" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 190 */
            {
              Context(
                "primitive",
                { "primitive.foreign" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 191 */
            {
              Context(
                "primitive",
                { "primitive.type.number.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 192 */
            {
              Context(
                "primitive.type.number.int.as.tree",
                { "primitive.type.number.int" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 193 */
            {
              Context(
                "primitive.type.number.float.as.tree",
                { "primitive.type.number.float" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 194 */
            {
              Context(
                "primitive.type.number.as.tree",
                { "primitive.type.number.int.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 195 */
            {
              Context(
                "primitive.type.number.as.tree",
                { "primitive.type.number.float.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 196 */
            {
              Context(
                "primitive",
                { "primitive.signal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 197 */
            {
              Context(
                "primitive.signal",
                { "primitive.signal.input.wire" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 198 */
            {
              Context(
                "primitive.signal",
                { "primitive.signal.input.terminate" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 199 */
            {
              Context(
                "primitive",
                { "primitive.type.cast.number" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 200 */
            {
              Context(
                "primitive.type.cast.number",
                { "primitive.type.cast.number.int" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 201 */
            {
              Context(
                "primitive.type.cast.number",
                { "primitive.type.cast.number.float" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 202 */
            {
              Context(
                "primitive.signal",
                { "primitive.signal.route" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 203 */
            {
              Context(
                "primitive.signal.route",
                { "primitive.signal.route.implied.outputs" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 204 */
            {
              Context(
                "primitive.signal.route",
                { "primitive.signal.route.implied.connections" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 205 */
            {
              Context(
                "primitive.signal.route",
                { "primitive.signal.route.explicit" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 206 */
            {
              Context(
                "primitive.signal",
                { "primitive.signal.source" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 207 */
            {
              Context(
                "primitive.signal.source",
                { "primitive.signal.source.table" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 208 */
            {
              Context(
                "primitive.signal.source",
                { "primitive.signal.source.soundfile" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 209 */
            {
              Context(
                "primitive.signal.source",
                { "primitive.signal.source.waveform.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 210 */
            {
              Context(
                "primitive",
                { "primitive.ui" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 211 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.button" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 212 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.checkbox" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 213 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.vslider" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 214 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.hslider" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 215 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.nentry" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 216 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.vgroup" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 217 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.hgroup" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 218 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.tgroup" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 219 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.vbargraph" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 220 */
            {
              Context(
                "primitive.ui",
                { "primitive.ui.hbargraph" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 221 */
            {
              Context(
                "primitive.foreign",
                { "primitive.foreign.function" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 222 */
            {
              Context(
                "primitive.foreign",
                { "primitive.foreign.constant" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 223 */
            {
              Context(
                "primitive.foreign",
                { "primitive.foreign.variable" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 224 */
            {
              Context(
                "primitive.signal",
                { "primitive.signal.inputs" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 225 */
            {
              Context(
                "primitive.signal",
                { "primitive.signal.outputs" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 226 */
            {
              Context(
                "statement.definition.function.args.start",
                { "statement.definition.function.arg" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 227 */
            {
              Context(
                "statement.definition.function.args.append",
                { "statement.definition.function.args" },
                { "COMMA", "statement.definition.function.arg" }
              )
            },
            {
              {"COMMA", 334},
              {"RPAR", 335}
            },
            {}
          },
          { /* State 228 */
            {
              Context(
                "statement.definition.function.args",
                { "statement.definition.function.args.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 229 */
            {
              Context(
                "statement.definition.function.args",
                { "statement.definition.function.args.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 230 */
            {
              Context(
                "expression.infix",
                { "statement.box.identifier.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 231 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336}
            },
            {}
          },
          { /* State 232 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 340}
            }
          },
          { /* State 233 */
            {
              Context(
                "expression",
                { "expression.composition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 234 */
            {
              Context(
                "expression.composition",
                { "expression.composition.parallel" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 235 */
            {
              Context(
                "expression.composition",
                { "expression.composition.serial" },
                {}
              ),
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311}
            },
            {}
          },
          { /* State 236 */
            {
              Context(
                "expression",
                { "expression.letrec" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 237 */
            {
              Context(
                "expression",
                { "statement.definition.with" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 238 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 341}
            },
            {}
          },
          { /* State 239 */
            {
              Context(
                "primitive.string.unquoted",
                { "STRING" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 240 */
            {
              Context(
                "primitive.string.unquoted.as.tree",
                { "primitive.string.unquoted" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 241 */
            {
              Context(
                "statement.import",
                { "IMPORT", "LPAR", "primitive.string.unquoted.as.tree" },
                { "RPAR", "statement.terminal" }
              )
            },
            {
              {"RPAR", 342}
            },
            {}
          },
          { /* State 242 */
            {
              Context(
                "primitive.string.quoted",
                { "STRING" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 243 */
            {
              Context(
                "primitive.string.quoted.as.tree",
                { "primitive.string.quoted" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 244 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 343}
            }
          },
          { /* State 245 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 242}
            },
            {
              {"primitive.string.quoted", 243},
              {"primitive.string.quoted.as.tree", 344}
            }
          },
          { /* State 246 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"STRING", 242},
              {"ENDL", 34}
            },
            {
              {"primitive.string.quoted", 243},
              {"primitive.string.quoted.as.tree", 345},
              {"statement.terminal", 346}
            }
          },
          { /* State 247 */
            {
              Context(
                "statement.declare.metadata",
                { "DECLARE", "statement.identifier.as.tree", "primitive.string.quoted.as.tree" },
                { "statement.terminal" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 348}
            }
          },
          { /* State 248 */
            {
              Context(
                "statement.declare.feature.metadata",
                { "DECLARE", "statement.identifier.as.tree", "statement.identifier.as.tree" },
                { "primitive.string.quoted.as.tree", "statement.terminal" }
              )
            },
            {
              {"STRING", 242}
            },
            {
              {"primitive.string.quoted", 243},
              {"primitive.string.quoted.as.tree", 350}
            }
          },
          { /* State 249 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 250 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"EEQN", 351}
            },
            {}
          },
          { /* State 251 */
            {
              Context(
                "doc.equation",
                { "BEQN", "expression" },
                { "EEQN" }
              ),
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"EEQN", 352}
            },
            {}
          },
          { /* State 252 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"EDGM", 353}
            },
            {}
          },
          { /* State 253 */
            {
              Context(
                "doc.diagram",
                { "BDGM", "expression" },
                { "EDGM" }
              ),
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"EDGM", 354}
            },
            {}
          },
          { /* State 254 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ELST", 355}
            },
            {}
          },
          { /* State 255 */
            {
              Context(
                "doc.list",
                { "BLST", "ELST" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 256 */
            {
              Context(
                "doc.attribute.definition.dependencies",
                { "LSTDEPENDENCIES" },
                { "LSTEQ", "LSTQ", "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTEQ", 356}
            },
            {}
          },
          { /* State 257 */
            {
              Context(
                "doc.attribute.definition.doc.tags",
                { "LSTMDOCTAGS" },
                { "LSTEQ", "LSTQ", "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTEQ", 357}
            },
            {}
          },
          { /* State 258 */
            {
              Context(
                "doc.attribute.definition.distributed",
                { "LSTDISTRIBUTED" },
                { "LSTEQ", "LSTQ", "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTEQ", 358}
            },
            {}
          },
          { /* State 259 */
            {
              Context(
                "doc.list",
                { "BLST", "doc.attribute.list" },
                { "ELST" }
              ),
              Context(
                "doc.attribute.list",
                { "doc.attribute.list" },
                { "doc.attribute.definition" }
              )
            },
            {
              {"ELST", 359},
              {"LSTDEPENDENCIES", 256},
              {"LSTMDOCTAGS", 257},
              {"LSTDISTRIBUTED", 258}
            },
            {
              {"doc.attribute.definition.dependencies", 260},
              {"doc.attribute.definition.doc.tags", 261},
              {"doc.attribute.definition.distributed", 262},
              {"doc.attribute.definition", 360}
            }
          },
          { /* State 260 */
            {
              Context(
                "doc.attribute.definition",
                { "doc.attribute.definition.dependencies" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 261 */
            {
              Context(
                "doc.attribute.definition",
                { "doc.attribute.definition.doc.tags" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 262 */
            {
              Context(
                "doc.attribute.definition",
                { "doc.attribute.definition.distributed" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 263 */
            {
              Context(
                "doc.attribute.list",
                { "doc.attribute.definition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 264 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"EMETADATA", 361}
            },
            {}
          },
          { /* State 265 */
            {
              Context(
                "doc.metadata",
                { "BMETADATA", "statement.identifier.as.tree" },
                { "EMETADATA" }
              )
            },
            {
              {"EMETADATA", 362}
            },
            {}
          },
          { /* State 266 */
            {
              Context(
                "statement.declare.doc",
                { "BDOC", "doc", "EDOC" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 267 */
            {
              Context(
                "doc.text",
                { "doc.text", "DOCCHAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 268 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 363}
            }
          },
          { /* State 269 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 364}
            },
            {}
          },
          { /* State 270 */
            {
              Context(
                "statement.definition.function.args.append",
                { "statement.definition.function.args" },
                { "COMMA", "statement.definition.function.arg" }
              ),
              Context(
                "statement.definition.function.declaration",
                { "statement.box.identifier.as.tree", "LPAR", "statement.definition.function.args" },
                { "RPAR", "DEF", "expression" }
              )
            },
            {
              {"COMMA", 334},
              {"RPAR", 365}
            },
            {}
          },
          { /* State 271 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 336},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 366}
            }
          },
          { /* State 272 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.assignment",
                { "statement.box.identifier.as.tree", "statement.definition.assignment.operator", "expression" },
                { "statement.terminal" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 368}
            }
          },
          { /* State 273 */
            {
              Context(
                "statement.list.append.qualified",
                { "statement.list", "statement.math.precision.list", "statement" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 274 */
            {
              Context(
                "expression.math.scalar.int",
                { "ADD", "INT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 275 */
            {
              Context(
                "expression.math.scalar.float",
                { "ADD", "FLOAT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 276 */
            {
              Context(
                "expression.math.scalar.int",
                { "SUB", "INT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 277 */
            {
              Context(
                "expression.math.scalar.float",
                { "SUB", "FLOAT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 278 */
            {
              Context(
                "expression.math.signal.algebra",
                { "SUB", "statement.box.identifier.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 279 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION", "LPAR" },
                { "primitive.foreign.function.signature", "COMMA", "primitive.string.tag.as.tree", "COMMA", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85}
            },
            {
              {"primitive.type.cast.number", 370},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.foreign.function.signature.names.1.args.0", 371},
              {"primitive.foreign.function.signature.names.1.args.list", 372},
              {"primitive.foreign.function.signature.names.2.args.0", 373},
              {"primitive.foreign.function.signature.names.2.args.list", 374},
              {"primitive.foreign.function.signature.names.3.args.0", 375},
              {"primitive.foreign.function.signature.names.3.args.list", 376},
              {"primitive.foreign.function.signature", 377}
            }
          },
          { /* State 280 */
            {
              Context(
                "primitive.foreign.constant",
                { "FCONSTANT", "LPAR" },
                { "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85}
            },
            {
              {"primitive.type.cast.number", 379},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201}
            }
          },
          { /* State 281 */
            {
              Context(
                "primitive.foreign.variable",
                { "FVARIABLE", "LPAR" },
                { "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85}
            },
            {
              {"primitive.type.cast.number", 381},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201}
            }
          },
          { /* State 282 */
            {
              Context(
                "primitive.ui.button",
                { "BUTTON", "LPAR" },
                { "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 383}
            }
          },
          { /* State 283 */
            {
              Context(
                "primitive.ui.checkbox",
                { "CHECKBOX", "LPAR" },
                { "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 385}
            }
          },
          { /* State 284 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 387}
            }
          },
          { /* State 285 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 389}
            }
          },
          { /* State 286 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 391}
            }
          },
          { /* State 287 */
            {
              Context(
                "primitive.ui.vgroup",
                { "VGROUP", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 393}
            }
          },
          { /* State 288 */
            {
              Context(
                "primitive.ui.hgroup",
                { "HGROUP", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 395}
            }
          },
          { /* State 289 */
            {
              Context(
                "primitive.ui.tgroup",
                { "TGROUP", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 397}
            }
          },
          { /* State 290 */
            {
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 399}
            }
          },
          { /* State 291 */
            {
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 401}
            }
          },
          { /* State 292 */
            {
              Context(
                "primitive.signal.source.soundfile",
                { "SOUNDFILE", "LPAR" },
                { "primitive.string.unquoted.as.tree", "COMMA", "expression.composition", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 402}
            }
          },
          { /* State 293 */
            {
              Context(
                "expression.lambda",
                { "LAMBDA", "LPAR" },
                { "expression.lambda.params", "RPAR", "DOT", "LPAR", "expression", "RPAR" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"expression.lambda.params", 404},
              {"expression.lambda.params.start", 405},
              {"expression.lambda.params.append", 406},
              {"statement.box.identifier.as.tree", 407}
            }
          },
          { /* State 294 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"RPAR", 408}
            },
            {}
          },
          { /* State 295 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "expression.parenthesis",
                { "LPAR", "expression" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 409}
            },
            {}
          },
          { /* State 296 */
            {
              Context(
                "expression.component",
                { "COMPONENT", "LPAR" },
                { "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 411}
            }
          },
          { /* State 297 */
            {
              Context(
                "expression.library",
                { "LIBRARY", "LPAR" },
                { "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 413}
            }
          },
          { /* State 298 */
            {
              Context(
                "expression.environment",
                { "ENVIRONMENT", "LBRAQ" },
                { "statement.list", "RBRAQ" }
              )
            },
            {
              {"IMPORT", 2},
              {"IDENT", 3},
              {"DECLARE", 4},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8},
              {"BDOC", 9}
            },
            {
              {"statement", 11},
              {"statement.definition", 12},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.declare.metadata", 16},
              {"statement.declare.feature.metadata", 17},
              {"statement.declare.doc", 18},
              {"statement.box.identifier.as.tree", 19},
              {"statement.import", 20},
              {"statement.list", 415},
              {"statement.list.start", 22},
              {"statement.list.start.qualified", 23},
              {"statement.list.append", 24},
              {"statement.list.append.qualified", 25},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 27},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 299 */
            {
              Context(
                "primitive.signal.source.waveform.as.tree",
                { "WAVEFORM", "LBRAQ" },
                { "primitive.type.number.list.as.tree", "RBRAQ" }
              )
            },
            {
              {"ADD", 416},
              {"SUB", 417},
              {"INT", 125},
              {"FLOAT", 126}
            },
            {
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 418},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 419},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 420},
              {"primitive.type.number.float.as.tree", 421},
              {"primitive.type.number.int.list.member.as.tree", 422},
              {"primitive.type.number.list.as.tree", 423},
              {"primitive.type.number.list.member.as.tree", 424},
              {"primitive.type.number.list.start.as.tree", 425},
              {"primitive.type.number.list.append.as.tree", 426},
              {"primitive.type.number.float.list.member.as.tree", 427}
            }
          },
          { /* State 300 */
            {
              Context(
                "primitive.signal.route.implied.outputs",
                { "ROUTE", "LPAR" },
                { "statement.definition.function.arg", "RPAR" }
              ),
              Context(
                "primitive.signal.route.implied.connections",
                { "ROUTE", "LPAR" },
                { "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "RPAR" }
              ),
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE", "LPAR" },
                { "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 149},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.function.arg", 428},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 301 */
            {
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL", "LPAR" },
                { "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 430}
            }
          },
          { /* State 302 */
            {
              Context(
                "expression.iterate.sequence",
                { "ISEQ", "LPAR" },
                { "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 432}
            }
          },
          { /* State 303 */
            {
              Context(
                "expression.iterate.sum",
                { "ISUM", "LPAR" },
                { "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 434}
            }
          },
          { /* State 304 */
            {
              Context(
                "expression.iterate.product",
                { "IPROD", "LPAR" },
                { "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 436}
            }
          },
          { /* State 305 */
            {
              Context(
                "primitive.signal.inputs",
                { "INPUTS", "LPAR" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 438},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 306 */
            {
              Context(
                "primitive.signal.outputs",
                { "OUTPUTS", "LPAR" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 440},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 307 */
            {
              Context(
                "expression.signal.logic",
                { "CASE", "LBRAQ" },
                { "statement.signal.pattern.rule.list", "RBRAQ" }
              )
            },
            {
              {"LPAR", 442}
            },
            {
              {"statement.signal.pattern.rule", 443},
              {"statement.signal.pattern.rule.list", 444},
              {"statement.signal.pattern.rule.list.start", 445},
              {"statement.signal.pattern.rule.list.append", 446}
            }
          },
          { /* State 308 */
            {
              Context(
                "expression.composition.split",
                { "expression.composition.serial", "SPLIT" },
                { "expression.composition.serial" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 447},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 309 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial", "MIX" },
                { "expression.composition.serial" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 448},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 310 */
            {
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial", "SEQ" },
                { "expression.composition.serial" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 449},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 311 */
            {
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial", "REC" },
                { "expression.composition.serial" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 450},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 312 */
            {
              Context(
                "expression.infix.math.comparison",
                { "expression.infix", "LT" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 451},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 313 */
            {
              Context(
                "expression.infix.math.comparison",
                { "expression.infix", "LE" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 452},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 314 */
            {
              Context(
                "expression.infix.math.comparison",
                { "expression.infix", "EQ" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 453},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 315 */
            {
              Context(
                "expression.infix.math.comparison",
                { "expression.infix", "GT" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 454},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 316 */
            {
              Context(
                "expression.infix.math.comparison",
                { "expression.infix", "GE" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 455},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 317 */
            {
              Context(
                "expression.infix.math.comparison",
                { "expression.infix", "NE" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 456},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 318 */
            {
              Context(
                "expression.infix.math.algebra",
                { "expression.infix", "ADD" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 457},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 319 */
            {
              Context(
                "expression.infix.math.algebra",
                { "expression.infix", "SUB" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 458},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 320 */
            {
              Context(
                "expression.infix.math.logic",
                { "expression.infix", "OR" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 459},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 321 */
            {
              Context(
                "expression.infix.math.algebra",
                { "expression.infix", "MUL" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 460},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 322 */
            {
              Context(
                "expression.infix.math.algebra",
                { "expression.infix", "DIV" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 461},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 323 */
            {
              Context(
                "expression.infix.math.algebra",
                { "expression.infix", "MOD" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 462},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 324 */
            {
              Context(
                "expression.infix.math.logic",
                { "expression.infix", "AND" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 463},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 325 */
            {
              Context(
                "expression.infix.math.logic",
                { "expression.infix", "XOR" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 464},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 326 */
            {
              Context(
                "expression.infix.math.shift",
                { "expression.infix", "LSH" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 465},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 327 */
            {
              Context(
                "expression.infix.math.shift",
                { "expression.infix", "RSH" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 466},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 328 */
            {
              Context(
                "expression.infix.math.algebra",
                { "expression.infix", "POWOP" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 467},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 329 */
            {
              Context(
                "expression.infix.signal.delay",
                { "expression.infix", "FDELAY" },
                { "expression.infix" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.environment", 154},
              {"expression.infix", 468},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 330 */
            {
              Context(
                "expression.infix.signal.delay",
                { "expression.infix", "DELAY1" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 331 */
            {
              Context(
                "expression.infix.environment.access",
                { "expression.infix", "DOT" },
                { "statement.box.identifier.as.tree" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 469}
            }
          },
          { /* State 332 */
            {
              Context(
                "expression.infix.prefix",
                { "expression.infix", "LPAR" },
                { "statement.definition.function.args", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 149},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.function.arg", 226},
              {"statement.definition.function.args", 471},
              {"statement.definition.function.args.start", 228},
              {"statement.definition.function.args.append", 229},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 333 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix", "LCROC" },
                { "statement.definition.list", "RCROC" }
              )
            },
            {
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 473},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.definition.list", 474},
              {"statement.definition.list.start", 475},
              {"statement.definition.list.start.qualified", 476},
              {"statement.definition.list.append", 477},
              {"statement.definition.list.append.qualified", 478},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 479},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 334 */
            {
              Context(
                "statement.definition.function.args.append",
                { "statement.definition.function.args", "COMMA" },
                { "statement.definition.function.arg" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 149},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.function.arg", 480},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 335 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"DEF", 481}
            },
            {}
          },
          { /* State 336 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LBRAQ", 482}
            },
            {}
          },
          { /* State 337 */
            {
              Context(
                "statement.definition.with",
                { "expression", "WITH" },
                { "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"LBRAQ", 483}
            },
            {}
          },
          { /* State 338 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC" },
                { "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression", "LETREC" },
                { "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression", "LETREC" },
                { "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"LBRAQ", 484}
            },
            {}
          },
          { /* State 339 */
            {
              Context(
                "expression.composition.parallel",
                { "expression", "COMMA" },
                { "expression" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 485},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 340 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 341 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 486}
            }
          },
          { /* State 342 */
            {
              Context(
                "statement.import",
                { "IMPORT", "LPAR", "primitive.string.unquoted.as.tree", "RPAR" },
                { "statement.terminal" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 488}
            }
          },
          { /* State 343 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 344 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 489}
            }
          },
          { /* State 345 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 490}
            }
          },
          { /* State 346 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 347 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 348 */
            {
              Context(
                "statement.declare.metadata",
                { "DECLARE", "statement.identifier.as.tree", "primitive.string.quoted.as.tree", "statement.terminal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 349 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 491}
            }
          },
          { /* State 350 */
            {
              Context(
                "statement.declare.feature.metadata",
                { "DECLARE", "statement.identifier.as.tree", "statement.identifier.as.tree", "primitive.string.quoted.as.tree" },
                { "statement.terminal" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 492}
            }
          },
          { /* State 351 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 352 */
            {
              Context(
                "doc.equation",
                { "BEQN", "expression", "EEQN" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 353 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 354 */
            {
              Context(
                "doc.diagram",
                { "BDGM", "expression", "EDGM" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 355 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 356 */
            {
              Context(
                "doc.attribute.definition.dependencies",
                { "LSTDEPENDENCIES", "LSTEQ" },
                { "LSTQ", "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTQ", 493}
            },
            {}
          },
          { /* State 357 */
            {
              Context(
                "doc.attribute.definition.doc.tags",
                { "LSTMDOCTAGS", "LSTEQ" },
                { "LSTQ", "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTQ", 494}
            },
            {}
          },
          { /* State 358 */
            {
              Context(
                "doc.attribute.definition.distributed",
                { "LSTDISTRIBUTED", "LSTEQ" },
                { "LSTQ", "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTQ", 495}
            },
            {}
          },
          { /* State 359 */
            {
              Context(
                "doc.list",
                { "BLST", "doc.attribute.list", "ELST" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 360 */
            {
              Context(
                "doc.attribute.list",
                { "doc.attribute.list", "doc.attribute.definition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 361 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 362 */
            {
              Context(
                "doc.metadata",
                { "BMETADATA", "statement.identifier.as.tree", "EMETADATA" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 363 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 364 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"DEF", 496}
            },
            {}
          },
          { /* State 365 */
            {
              Context(
                "statement.definition.function.declaration",
                { "statement.box.identifier.as.tree", "LPAR", "statement.definition.function.args", "RPAR" },
                { "DEF", "expression" }
              )
            },
            {
              {"DEF", 497}
            },
            {}
          },
          { /* State 366 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 367 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 368 */
            {
              Context(
                "statement.definition.assignment",
                { "statement.box.identifier.as.tree", "statement.definition.assignment.operator", "expression", "statement.terminal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 369 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 498},
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 500}
            }
          },
          { /* State 370 */
            {
              Context(
                "primitive.foreign.function.signature.names.1.args.0",
                { "primitive.type.cast.number" },
                { "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.1.args.list",
                { "primitive.type.cast.number" },
                { "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.0",
                { "primitive.type.cast.number" },
                { "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.list",
                { "primitive.type.cast.number" },
                { "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number" },
                { "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number" },
                { "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 502}
            }
          },
          { /* State 371 */
            {
              Context(
                "primitive.foreign.function.signature",
                { "primitive.foreign.function.signature.names.1.args.0" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 372 */
            {
              Context(
                "primitive.foreign.function.signature",
                { "primitive.foreign.function.signature.names.1.args.list" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 373 */
            {
              Context(
                "primitive.foreign.function.signature",
                { "primitive.foreign.function.signature.names.2.args.0" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 374 */
            {
              Context(
                "primitive.foreign.function.signature",
                { "primitive.foreign.function.signature.names.2.args.list" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 375 */
            {
              Context(
                "primitive.foreign.function.signature",
                { "primitive.foreign.function.signature.names.3.args.0" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 376 */
            {
              Context(
                "primitive.foreign.function.signature",
                { "primitive.foreign.function.signature.names.3.args.list" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 377 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION", "LPAR", "primitive.foreign.function.signature" },
                { "COMMA", "primitive.string.tag.as.tree", "COMMA", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"COMMA", 503}
            },
            {}
          },
          { /* State 378 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 39}
            },
            {
              {"statement.identifier.as.tree", 504}
            }
          },
          { /* State 379 */
            {
              Context(
                "primitive.foreign.constant",
                { "FCONSTANT", "LPAR", "primitive.type.cast.number" },
                { "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"IDENT", 39}
            },
            {
              {"statement.identifier.as.tree", 506}
            }
          },
          { /* State 380 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 39}
            },
            {
              {"statement.identifier.as.tree", 507}
            }
          },
          { /* State 381 */
            {
              Context(
                "primitive.foreign.variable",
                { "FVARIABLE", "LPAR", "primitive.type.cast.number" },
                { "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"IDENT", 39}
            },
            {
              {"statement.identifier.as.tree", 509}
            }
          },
          { /* State 382 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 510}
            },
            {}
          },
          { /* State 383 */
            {
              Context(
                "primitive.ui.button",
                { "BUTTON", "LPAR", "primitive.string.unquoted.as.tree" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 511}
            },
            {}
          },
          { /* State 384 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 512}
            },
            {}
          },
          { /* State 385 */
            {
              Context(
                "primitive.ui.checkbox",
                { "CHECKBOX", "LPAR", "primitive.string.unquoted.as.tree" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 513}
            },
            {}
          },
          { /* State 386 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 514}
            },
            {}
          },
          { /* State 387 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"COMMA", 515}
            },
            {}
          },
          { /* State 388 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 516}
            },
            {}
          },
          { /* State 389 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"COMMA", 517}
            },
            {}
          },
          { /* State 390 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 518}
            },
            {}
          },
          { /* State 391 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"COMMA", 519}
            },
            {}
          },
          { /* State 392 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 520}
            },
            {}
          },
          { /* State 393 */
            {
              Context(
                "primitive.ui.vgroup",
                { "VGROUP", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 521}
            },
            {}
          },
          { /* State 394 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 522}
            },
            {}
          },
          { /* State 395 */
            {
              Context(
                "primitive.ui.hgroup",
                { "HGROUP", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 523}
            },
            {}
          },
          { /* State 396 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 524}
            },
            {}
          },
          { /* State 397 */
            {
              Context(
                "primitive.ui.tgroup",
                { "TGROUP", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 525}
            },
            {}
          },
          { /* State 398 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 526}
            },
            {}
          },
          { /* State 399 */
            {
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"COMMA", 527}
            },
            {}
          },
          { /* State 400 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 528}
            },
            {}
          },
          { /* State 401 */
            {
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"COMMA", 529}
            },
            {}
          },
          { /* State 402 */
            {
              Context(
                "primitive.signal.source.soundfile",
                { "SOUNDFILE", "LPAR", "primitive.string.unquoted.as.tree" },
                { "COMMA", "expression.composition", "RPAR" }
              )
            },
            {
              {"COMMA", 530}
            },
            {}
          },
          { /* State 403 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 531}
            },
            {}
          },
          { /* State 404 */
            {
              Context(
                "expression.lambda",
                { "LAMBDA", "LPAR", "expression.lambda.params" },
                { "RPAR", "DOT", "LPAR", "expression", "RPAR" }
              ),
              Context(
                "expression.lambda.params.append",
                { "expression.lambda.params" },
                { "COMMA", "statement.box.identifier.as.tree" }
              )
            },
            {
              {"COMMA", 532},
              {"RPAR", 533}
            },
            {}
          },
          { /* State 405 */
            {
              Context(
                "expression.lambda.params",
                { "expression.lambda.params.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 406 */
            {
              Context(
                "expression.lambda.params",
                { "expression.lambda.params.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 407 */
            {
              Context(
                "expression.lambda.params.start",
                { "statement.box.identifier.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 408 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 409 */
            {
              Context(
                "expression.parenthesis",
                { "LPAR", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 410 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 534}
            },
            {}
          },
          { /* State 411 */
            {
              Context(
                "expression.component",
                { "COMPONENT", "LPAR", "primitive.string.unquoted.as.tree" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 535}
            },
            {}
          },
          { /* State 412 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 536}
            },
            {}
          },
          { /* State 413 */
            {
              Context(
                "expression.library",
                { "LIBRARY", "LPAR", "primitive.string.unquoted.as.tree" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 537}
            },
            {}
          },
          { /* State 414 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"LPAR", 32},
              {"RBRAQ", 538},
              {"DEF", 33},
              {"ENDL", 34}
            },
            {
              {"statement.definition.assignment.operator", 35},
              {"statement.terminal", 36}
            }
          },
          { /* State 415 */
            {
              Context(
                "expression.environment",
                { "ENVIRONMENT", "LBRAQ", "statement.list" },
                { "RBRAQ" }
              ),
              Context(
                "statement.list.append",
                { "statement.list" },
                { "statement" }
              ),
              Context(
                "statement.list.append.qualified",
                { "statement.list" },
                { "statement.math.precision.list", "statement" }
              )
            },
            {
              {"RBRAQ", 539},
              {"IMPORT", 2},
              {"IDENT", 3},
              {"DECLARE", 4},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8},
              {"BDOC", 9}
            },
            {
              {"statement", 60},
              {"statement.definition", 12},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.declare.metadata", 16},
              {"statement.declare.feature.metadata", 17},
              {"statement.declare.doc", 18},
              {"statement.box.identifier.as.tree", 19},
              {"statement.import", 20},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 61},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 416 */
            {
              Context(
                "expression.math.scalar.int",
                { "ADD" },
                { "INT" }
              ),
              Context(
                "expression.math.scalar.float",
                { "ADD" },
                { "FLOAT" }
              )
            },
            {
              {"INT", 274},
              {"FLOAT", 275}
            },
            {}
          },
          { /* State 417 */
            {
              Context(
                "expression.math.scalar.int",
                { "SUB" },
                { "INT" }
              ),
              Context(
                "expression.math.scalar.float",
                { "SUB" },
                { "FLOAT" }
              )
            },
            {
              {"INT", 276},
              {"FLOAT", 277}
            },
            {}
          },
          { /* State 418 */
            {
              Context(
                "primitive.type.number.int.list.member.as.tree",
                { "expression.math.scalar.int.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 419 */
            {
              Context(
                "primitive.type.number.float.list.member.as.tree",
                { "expression.math.scalar.float.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 420 */
            {
              Context(
                "primitive.type.number.int.list.member.as.tree",
                { "primitive.type.number.int.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 421 */
            {
              Context(
                "primitive.type.number.float.list.member.as.tree",
                { "primitive.type.number.float.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 422 */
            {
              Context(
                "primitive.type.number.list.member.as.tree",
                { "primitive.type.number.int.list.member.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 423 */
            {
              Context(
                "primitive.type.number.list.append.as.tree",
                { "primitive.type.number.list.as.tree" },
                { "COMMA", "primitive.type.number.list.member.as.tree" }
              ),
              Context(
                "primitive.signal.source.waveform.as.tree",
                { "WAVEFORM", "LBRAQ", "primitive.type.number.list.as.tree" },
                { "RBRAQ" }
              )
            },
            {
              {"COMMA", 540},
              {"RBRAQ", 541}
            },
            {}
          },
          { /* State 424 */
            {
              Context(
                "primitive.type.number.list.start.as.tree",
                { "primitive.type.number.list.member.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 425 */
            {
              Context(
                "primitive.type.number.list.as.tree",
                { "primitive.type.number.list.start.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 426 */
            {
              Context(
                "primitive.type.number.list.as.tree",
                { "primitive.type.number.list.append.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 427 */
            {
              Context(
                "primitive.type.number.list.member.as.tree",
                { "primitive.type.number.float.list.member.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 428 */
            {
              Context(
                "primitive.signal.route.implied.outputs",
                { "ROUTE", "LPAR", "statement.definition.function.arg" },
                { "RPAR" }
              ),
              Context(
                "primitive.signal.route.implied.connections",
                { "ROUTE", "LPAR", "statement.definition.function.arg" },
                { "COMMA", "statement.definition.function.arg", "RPAR" }
              ),
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE", "LPAR", "statement.definition.function.arg" },
                { "COMMA", "statement.definition.function.arg", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 542},
              {"RPAR", 543}
            },
            {}
          },
          { /* State 429 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 544}
            },
            {}
          },
          { /* State 430 */
            {
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL", "LPAR", "statement.box.identifier.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 545}
            },
            {}
          },
          { /* State 431 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 546}
            },
            {}
          },
          { /* State 432 */
            {
              Context(
                "expression.iterate.sequence",
                { "ISEQ", "LPAR", "statement.box.identifier.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 547}
            },
            {}
          },
          { /* State 433 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 548}
            },
            {}
          },
          { /* State 434 */
            {
              Context(
                "expression.iterate.sum",
                { "ISUM", "LPAR", "statement.box.identifier.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 549}
            },
            {}
          },
          { /* State 435 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 550}
            },
            {}
          },
          { /* State 436 */
            {
              Context(
                "expression.iterate.product",
                { "IPROD", "LPAR", "statement.box.identifier.as.tree" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 551}
            },
            {}
          },
          { /* State 437 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"RPAR", 552}
            },
            {}
          },
          { /* State 438 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "primitive.signal.inputs",
                { "INPUTS", "LPAR", "expression" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 553}
            },
            {}
          },
          { /* State 439 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"RPAR", 554}
            },
            {}
          },
          { /* State 440 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "primitive.signal.outputs",
                { "OUTPUTS", "LPAR", "expression" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 555}
            },
            {}
          },
          { /* State 441 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RBRAQ", 556}
            },
            {}
          },
          { /* State 442 */
            {
              Context(
                "statement.signal.pattern.rule",
                { "LPAR" },
                { "statement.definition.function.args", "RPAR", "ARROW", "expression", "statement.terminal" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 149},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.function.arg", 226},
              {"statement.definition.function.args", 558},
              {"statement.definition.function.args.start", 228},
              {"statement.definition.function.args.append", 229},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 443 */
            {
              Context(
                "statement.signal.pattern.rule.list.start",
                { "statement.signal.pattern.rule" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 444 */
            {
              Context(
                "expression.signal.logic",
                { "CASE", "LBRAQ", "statement.signal.pattern.rule.list" },
                { "RBRAQ" }
              ),
              Context(
                "statement.signal.pattern.rule.list.append",
                { "statement.signal.pattern.rule.list" },
                { "statement.signal.pattern.rule" }
              )
            },
            {
              {"LPAR", 442},
              {"RBRAQ", 559}
            },
            {
              {"statement.signal.pattern.rule", 560}
            }
          },
          { /* State 445 */
            {
              Context(
                "statement.signal.pattern.rule.list",
                { "statement.signal.pattern.rule.list.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 446 */
            {
              Context(
                "statement.signal.pattern.rule.list",
                { "statement.signal.pattern.rule.list.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 447 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "                            ",
                { "expression.composition.serial", "SPLIT", "expression.composition.serial" },
                {}
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311}
            },
            {}
          },
          { /* State 448 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "                          ",
                { "expression.composition.serial", "MIX", "expression.composition.serial" },
                {}
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311}
            },
            {}
          },
          { /* State 449 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "                               ",
                { "expression.composition.serial", "SEQ", "expression.composition.serial" },
                {}
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SEQ", 310},
              {"REC", 311}
            },
            {}
          },
          { /* State 450 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "                                ",
                { "expression.composition.serial", "REC", "expression.composition.serial" },
                {}
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {},
            {}
          },
          { /* State 451 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix", "LT", "expression.infix" },
                {}
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"LE", 313},
              {"EQ", 314},
              {"GT", 315},
              {"GE", 316},
              {"NE", 317},
              {"ADD", 318},
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 452 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix", "LE", "expression.infix" },
                {}
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"EQ", 314},
              {"GT", 315},
              {"GE", 316},
              {"NE", 317},
              {"ADD", 318},
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 453 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix", "EQ", "expression.infix" },
                {}
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"GT", 315},
              {"GE", 316},
              {"NE", 317},
              {"ADD", 318},
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 454 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix", "GT", "expression.infix" },
                {}
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"GE", 316},
              {"NE", 317},
              {"ADD", 318},
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 455 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix", "GE", "expression.infix" },
                {}
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"NE", 317},
              {"ADD", 318},
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 456 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix", "NE", "expression.infix" },
                {}
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"ADD", 318},
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 457 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix", "ADD", "expression.infix" },
                {}
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"SUB", 319},
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 458 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix", "SUB", "expression.infix" },
                {}
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"OR", 320},
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 459 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix", "OR", "expression.infix" },
                {}
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"MUL", 321},
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 460 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix", "MUL", "expression.infix" },
                {}
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"DIV", 322},
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 461 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix", "DIV", "expression.infix" },
                {}
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"MOD", 323},
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 462 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix", "MOD", "expression.infix" },
                {}
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"AND", 324},
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 463 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix", "AND", "expression.infix" },
                {}
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"XOR", 325},
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 464 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix", "XOR", "expression.infix" },
                {}
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"LSH", 326},
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 465 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix", "LSH", "expression.infix" },
                {}
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"RSH", 327},
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 466 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix", "RSH", "expression.infix" },
                {}
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"POWOP", 328},
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 467 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix", "POWOP", "expression.infix" },
                {}
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"FDELAY", 329},
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 468 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix" },
                { "LCROC", "statement.definition.list", "RCROC" }
              ),
              Context(
                "expression.infix.environment.access",
                { "expression.infix" },
                { "DOT", "statement.box.identifier.as.tree" }
              ),
              Context(
                "expression.infix.math.algebra",
                { "expression.infix" },
                { "ADD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "SUB", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MUL", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DIV", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "MOD", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "POWOP", "expression.infix" }
              ),
              Context(
                "expression.infix.math.comparison",
                { "expression.infix" },
                { "LT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "LE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GT", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "GE", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "EQ", "expression.infix" }
              ),
              Context(
                "                                ",
                { "expression.infix" },
                { "NE", "expression.infix" }
              ),
              Context(
                "expression.infix.math.logic",
                { "expression.infix" },
                { "AND", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "OR", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "XOR", "expression.infix" }
              ),
              Context(
                "expression.infix.math.shift",
                { "expression.infix" },
                { "LSH", "expression.infix" }
              ),
              Context(
                "                           ",
                { "expression.infix" },
                { "RSH", "expression.infix" }
              ),
              Context(
                "expression.infix.prefix",
                { "expression.infix" },
                { "LPAR", "statement.definition.function.args", "RPAR" }
              ),
              Context(
                "expression.infix.signal.delay",
                { "expression.infix" },
                { "FDELAY", "expression.infix" }
              ),
              Context(
                "                             ",
                { "expression.infix", "FDELAY", "expression.infix" },
                {}
              ),
              Context(
                "                             ",
                { "expression.infix" },
                { "DELAY1" }
              )
            },
            {
              {"DELAY1", 330},
              {"DOT", 331},
              {"LPAR", 332},
              {"LCROC", 333}
            },
            {}
          },
          { /* State 469 */
            {
              Context(
                "expression.infix.environment.access",
                { "expression.infix", "DOT", "statement.box.identifier.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 470 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 561}
            },
            {}
          },
          { /* State 471 */
            {
              Context(
                "expression.infix.prefix",
                { "expression.infix", "LPAR", "statement.definition.function.args" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.function.args.append",
                { "statement.definition.function.args" },
                { "COMMA", "statement.definition.function.arg" }
              )
            },
            {
              {"COMMA", 334},
              {"RPAR", 562}
            },
            {}
          },
          { /* State 472 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"LPAR", 32},
              {"RCROC", 563},
              {"DEF", 33},
              {"ENDL", 34}
            },
            {
              {"statement.definition.assignment.operator", 35},
              {"statement.terminal", 36}
            }
          },
          { /* State 473 */
            {
              Context(
                "statement.definition.list.start",
                { "statement.definition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 474 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix", "LCROC", "statement.definition.list" },
                { "RCROC" }
              ),
              Context(
                "statement.definition.list.append",
                { "statement.definition.list" },
                { "statement.definition" }
              ),
              Context(
                "statement.definition.list.append.qualified",
                { "statement.definition.list" },
                { "statement.math.precision.list", "statement.definition" }
              )
            },
            {
              {"RCROC", 564},
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 565},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 566},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 475 */
            {
              Context(
                "statement.definition.list",
                { "statement.definition.list.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 476 */
            {
              Context(
                "statement.definition.list",
                { "statement.definition.list.start.qualified" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 477 */
            {
              Context(
                "statement.definition.list",
                { "statement.definition.list.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 478 */
            {
              Context(
                "statement.definition.list",
                { "statement.definition.list.append.qualified" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 479 */
            {
              Context(
                "statement.definition.list.start.qualified",
                { "statement.math.precision.list" },
                { "statement.definition" }
              ),
              Context(
                "statement.math.precision.list.append",
                { "statement.math.precision.list" },
                { "statement.math.precision" }
              )
            },
            {
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 567},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 63}
            }
          },
          { /* State 480 */
            {
              Context(
                "statement.definition.function.args.append",
                { "statement.definition.function.args", "COMMA", "statement.definition.function.arg" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 481 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 568},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 482 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 473},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.definition.list", 569},
              {"statement.definition.list.start", 475},
              {"statement.definition.list.start.qualified", 476},
              {"statement.definition.list.append", 477},
              {"statement.definition.list.append.qualified", 478},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 479},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 483 */
            {
              Context(
                "statement.definition.with",
                { "expression", "WITH", "LBRAQ" },
                { "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 473},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.definition.list", 571},
              {"statement.definition.list.start", 475},
              {"statement.definition.list.start.qualified", 476},
              {"statement.definition.list.append", 477},
              {"statement.definition.list.append.qualified", 478},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 479},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 484 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC", "LBRAQ" },
                { "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression", "LETREC", "LBRAQ" },
                { "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression", "LETREC", "LBRAQ" },
                { "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"DELAY1", 573},
              {"RBRAQ", 574}
            },
            {
              {"expression.letrec.list", 575},
              {"expression.letrec.list.start", 576},
              {"expression.letrec.list.append", 577},
              {"expression.letrec.equation", 578},
              {"expression.letrec.equation.name", 579}
            }
          },
          { /* State 485 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "                               ",
                { "expression", "COMMA", "expression" },
                {}
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"COMMA", 339}
            },
            {}
          },
          { /* State 486 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 487 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 488 */
            {
              Context(
                "statement.import",
                { "IMPORT", "LPAR", "primitive.string.unquoted.as.tree", "RPAR", "statement.terminal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 489 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 490 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 491 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 492 */
            {
              Context(
                "statement.declare.feature.metadata",
                { "DECLARE", "statement.identifier.as.tree", "statement.identifier.as.tree", "primitive.string.quoted.as.tree", "statement.terminal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 493 */
            {
              Context(
                "doc.attribute.definition.dependencies",
                { "LSTDEPENDENCIES", "LSTEQ", "LSTQ" },
                { "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTTRUE", 581},
              {"LSTFALSE", 582}
            },
            {
              {"doc.attribute.value", 583}
            }
          },
          { /* State 494 */
            {
              Context(
                "doc.attribute.definition.doc.tags",
                { "LSTMDOCTAGS", "LSTEQ", "LSTQ" },
                { "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTTRUE", 581},
              {"LSTFALSE", 582}
            },
            {
              {"doc.attribute.value", 585}
            }
          },
          { /* State 495 */
            {
              Context(
                "doc.attribute.definition.distributed",
                { "LSTDISTRIBUTED", "LSTEQ", "LSTQ" },
                { "doc.attribute.value", "LSTQ" }
              )
            },
            {
              {"LSTTRUE", 581},
              {"LSTFALSE", 582}
            },
            {
              {"doc.attribute.value", 587}
            }
          },
          { /* State 496 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 588},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 497 */
            {
              Context(
                "statement.definition.function.declaration",
                { "statement.box.identifier.as.tree", "LPAR", "statement.definition.function.args", "RPAR", "DEF" },
                { "expression" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 589},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 498 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 593}
            }
          },
          { /* State 499 */
            {
              Context(
                "statement.foreign.function.identifier.as.tree",
                { "IDENT" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 500 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"OR", 594},
              {"LPAR", 595}
            },
            {}
          },
          { /* State 501 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"OR", 596},
              {"LPAR", 597}
            },
            {}
          },
          { /* State 502 */
            {
              Context(
                "primitive.foreign.function.signature.names.1.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree" },
                { "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.1.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree" },
                { "LPAR", "primitive.type.list", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree" },
                { "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree" },
                { "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree" },
                { "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree" },
                { "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              )
            },
            {
              {"OR", 598},
              {"LPAR", 599}
            },
            {}
          },
          { /* State 503 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION", "LPAR", "primitive.foreign.function.signature", "COMMA" },
                { "primitive.string.tag.as.tree", "COMMA", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 601}
            }
          },
          { /* State 504 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 602}
            },
            {}
          },
          { /* State 505 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 603}
            },
            {}
          },
          { /* State 506 */
            {
              Context(
                "primitive.foreign.constant",
                { "FCONSTANT", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree" },
                { "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"COMMA", 604}
            },
            {}
          },
          { /* State 507 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 605}
            },
            {}
          },
          { /* State 508 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 606}
            },
            {}
          },
          { /* State 509 */
            {
              Context(
                "primitive.foreign.variable",
                { "FVARIABLE", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree" },
                { "COMMA", "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"COMMA", 607}
            },
            {}
          },
          { /* State 510 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 511 */
            {
              Context(
                "primitive.ui.button",
                { "BUTTON", "LPAR", "primitive.string.unquoted.as.tree", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 512 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 513 */
            {
              Context(
                "primitive.ui.checkbox",
                { "CHECKBOX", "LPAR", "primitive.string.unquoted.as.tree", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 514 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 608},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 515 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 610},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 516 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 611},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 517 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 613},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 518 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 614},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 519 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 616},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 520 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 617},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 521 */
            {
              Context(
                "primitive.ui.vgroup",
                { "VGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 619},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 522 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 620},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 523 */
            {
              Context(
                "primitive.ui.hgroup",
                { "HGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 622},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 524 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 623},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 525 */
            {
              Context(
                "primitive.ui.tgroup",
                { "TGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 625},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 526 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 626},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 527 */
            {
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 628},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 528 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 629},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 529 */
            {
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 631},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 530 */
            {
              Context(
                "primitive.signal.source.soundfile",
                { "SOUNDFILE", "LPAR", "primitive.string.unquoted.as.tree", "COMMA" },
                { "expression.composition", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 632},
              {"expression.component", 148},
              {"expression.composition", 633},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 531 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"DOT", 634}
            },
            {}
          },
          { /* State 532 */
            {
              Context(
                "expression.lambda.params.append",
                { "expression.lambda.params", "COMMA" },
                { "statement.box.identifier.as.tree" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 635}
            }
          },
          { /* State 533 */
            {
              Context(
                "expression.lambda",
                { "LAMBDA", "LPAR", "expression.lambda.params", "RPAR" },
                { "DOT", "LPAR", "expression", "RPAR" }
              )
            },
            {
              {"DOT", 636}
            },
            {}
          },
          { /* State 534 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 535 */
            {
              Context(
                "expression.component",
                { "COMPONENT", "LPAR", "primitive.string.unquoted.as.tree", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 536 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 537 */
            {
              Context(
                "expression.library",
                { "LIBRARY", "LPAR", "primitive.string.unquoted.as.tree", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 538 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 539 */
            {
              Context(
                "expression.environment",
                { "ENVIRONMENT", "LBRAQ", "statement.list", "RBRAQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 540 */
            {
              Context(
                "primitive.type.number.list.append.as.tree",
                { "primitive.type.number.list.as.tree", "COMMA" },
                { "primitive.type.number.list.member.as.tree" }
              )
            },
            {
              {"ADD", 416},
              {"SUB", 417},
              {"INT", 125},
              {"FLOAT", 126}
            },
            {
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 418},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 419},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 420},
              {"primitive.type.number.float.as.tree", 421},
              {"primitive.type.number.int.list.member.as.tree", 422},
              {"primitive.type.number.list.member.as.tree", 637},
              {"primitive.type.number.float.list.member.as.tree", 427}
            }
          },
          { /* State 541 */
            {
              Context(
                "primitive.signal.source.waveform.as.tree",
                { "WAVEFORM", "LBRAQ", "primitive.type.number.list.as.tree", "RBRAQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 542 */
            {
              Context(
                "primitive.signal.route.implied.connections",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA" },
                { "statement.definition.function.arg", "RPAR" }
              ),
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA" },
                { "statement.definition.function.arg", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 149},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.function.arg", 638},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 543 */
            {
              Context(
                "primitive.signal.route.implied.outputs",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 544 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 545 */
            {
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL", "LPAR", "statement.box.identifier.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 639},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 546 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 547 */
            {
              Context(
                "expression.iterate.sequence",
                { "ISEQ", "LPAR", "statement.box.identifier.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 640},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 548 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 549 */
            {
              Context(
                "expression.iterate.sum",
                { "ISUM", "LPAR", "statement.box.identifier.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 641},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 550 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 551 */
            {
              Context(
                "expression.iterate.product",
                { "IPROD", "LPAR", "statement.box.identifier.as.tree", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 642},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 552 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 553 */
            {
              Context(
                "primitive.signal.inputs",
                { "INPUTS", "LPAR", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 554 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 555 */
            {
              Context(
                "primitive.signal.outputs",
                { "OUTPUTS", "LPAR", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 556 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 557 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 643}
            },
            {}
          },
          { /* State 558 */
            {
              Context(
                "statement.definition.function.args.append",
                { "statement.definition.function.args" },
                { "COMMA", "statement.definition.function.arg" }
              ),
              Context(
                "statement.signal.pattern.rule",
                { "LPAR", "statement.definition.function.args" },
                { "RPAR", "ARROW", "expression", "statement.terminal" }
              )
            },
            {
              {"COMMA", 334},
              {"RPAR", 644}
            },
            {}
          },
          { /* State 559 */
            {
              Context(
                "expression.signal.logic",
                { "CASE", "LBRAQ", "statement.signal.pattern.rule.list", "RBRAQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 560 */
            {
              Context(
                "statement.signal.pattern.rule.list.append",
                { "statement.signal.pattern.rule.list", "statement.signal.pattern.rule" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 561 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 562 */
            {
              Context(
                "expression.infix.prefix",
                { "expression.infix", "LPAR", "statement.definition.function.args", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 563 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 564 */
            {
              Context(
                "expression.infix.definitions.substitution",
                { "expression.infix", "LCROC", "statement.definition.list", "RCROC" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 565 */
            {
              Context(
                "statement.definition.list.append",
                { "statement.definition.list", "statement.definition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 566 */
            {
              Context(
                "statement.definition.list.append.qualified",
                { "statement.definition.list", "statement.math.precision.list" },
                { "statement.definition" }
              ),
              Context(
                "statement.math.precision.list.append",
                { "statement.math.precision.list" },
                { "statement.math.precision" }
              )
            },
            {
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 645},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 63}
            }
          },
          { /* State 567 */
            {
              Context(
                "statement.definition.list.start.qualified",
                { "statement.math.precision.list", "statement.definition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 568 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339}
            },
            {}
          },
          { /* State 569 */
            {
              Context(
                "statement.definition.list.append",
                { "statement.definition.list" },
                { "statement.definition" }
              ),
              Context(
                "statement.definition.list.append.qualified",
                { "statement.definition.list" },
                { "statement.math.precision.list", "statement.definition" }
              )
            },
            {
              {"RBRAQ", 646},
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 565},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 566},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 570 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"LPAR", 32},
              {"RBRAQ", 647},
              {"DEF", 33},
              {"ENDL", 34}
            },
            {
              {"statement.definition.assignment.operator", 35},
              {"statement.terminal", 36}
            }
          },
          { /* State 571 */
            {
              Context(
                "statement.definition.with",
                { "expression", "WITH", "LBRAQ", "statement.definition.list" },
                { "RBRAQ" }
              ),
              Context(
                "statement.definition.list.append",
                { "statement.definition.list" },
                { "statement.definition" }
              ),
              Context(
                "statement.definition.list.append.qualified",
                { "statement.definition.list" },
                { "statement.math.precision.list", "statement.definition" }
              )
            },
            {
              {"RBRAQ", 648},
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 565},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 566},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 572 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RBRAQ", 649},
              {"WHERE", 650},
              {"DEF", 651}
            },
            {}
          },
          { /* State 573 */
            {
              Context(
                "expression.letrec.equation.name",
                { "DELAY1" },
                { "statement.box.identifier.as.tree" }
              )
            },
            {
              {"IDENT", 3}
            },
            {
              {"statement.box.identifier.as.tree", 652}
            }
          },
          { /* State 574 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC", "LBRAQ", "RBRAQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 575 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC", "LBRAQ", "expression.letrec.list" },
                { "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression", "LETREC", "LBRAQ", "expression.letrec.list" },
                { "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "expression.letrec.list.append",
                { "expression.letrec.list" },
                { "expression.letrec.equation" }
              )
            },
            {
              {"DELAY1", 573},
              {"RBRAQ", 654},
              {"WHERE", 655}
            },
            {
              {"expression.letrec.equation", 656},
              {"expression.letrec.equation.name", 579}
            }
          },
          { /* State 576 */
            {
              Context(
                "expression.letrec.list",
                { "expression.letrec.list.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 577 */
            {
              Context(
                "expression.letrec.list",
                { "expression.letrec.list.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 578 */
            {
              Context(
                "expression.letrec.list.start",
                { "expression.letrec.equation" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 579 */
            {
              Context(
                "expression.letrec.equation",
                { "expression.letrec.equation.name" },
                { "DEF", "expression", "statement.terminal" }
              )
            },
            {
              {"DEF", 657}
            },
            {}
          },
          { /* State 580 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LSTQ", 658}
            },
            {}
          },
          { /* State 581 */
            {
              Context(
                "doc.attribute.value",
                { "LSTTRUE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 582 */
            {
              Context(
                "doc.attribute.value",
                { "LSTFALSE" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 583 */
            {
              Context(
                "doc.attribute.definition.dependencies",
                { "LSTDEPENDENCIES", "LSTEQ", "LSTQ", "doc.attribute.value" },
                { "LSTQ" }
              )
            },
            {
              {"LSTQ", 659}
            },
            {}
          },
          { /* State 584 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LSTQ", 660}
            },
            {}
          },
          { /* State 585 */
            {
              Context(
                "doc.attribute.definition.doc.tags",
                { "LSTMDOCTAGS", "LSTEQ", "LSTQ", "doc.attribute.value" },
                { "LSTQ" }
              )
            },
            {
              {"LSTQ", 661}
            },
            {}
          },
          { /* State 586 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LSTQ", 662}
            },
            {}
          },
          { /* State 587 */
            {
              Context(
                "doc.attribute.definition.distributed",
                { "LSTDISTRIBUTED", "LSTEQ", "LSTQ", "doc.attribute.value" },
                { "LSTQ" }
              )
            },
            {
              {"LSTQ", 663}
            },
            {}
          },
          { /* State 588 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339}
            },
            {}
          },
          { /* State 589 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.function.declaration",
                { "statement.box.identifier.as.tree", "LPAR", "statement.definition.function.args", "RPAR", "DEF", "expression" },
                {}
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339}
            },
            {}
          },
          { /* State 590 */
            {
              Context(
                "primitive.string.tag",
                { "STRING" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 591 */
            {
              Context(
                "primitive.string.tag",
                { "TAGSTRING" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 592 */
            {
              Context(
                "primitive.string.tag.as.tree",
                { "primitive.string.tag" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 593 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 664}
            },
            {}
          },
          { /* State 594 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 665}
            }
          },
          { /* State 595 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 667}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 671},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 596 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 674}
            }
          },
          { /* State 597 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 675}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 676},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 598 */
            {
              Context(
                "primitive.foreign.function.signature.names.2.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR" },
                { "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR" },
                { "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR" },
                { "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR" },
                { "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 678}
            }
          },
          { /* State 599 */
            {
              Context(
                "primitive.foreign.function.signature.names.1.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "LPAR" },
                { "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.1.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "LPAR" },
                { "primitive.type.list", "RPAR" }
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 680}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 681},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 600 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 682}
            },
            {}
          },
          { /* State 601 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION", "LPAR", "primitive.foreign.function.signature", "COMMA", "primitive.string.tag.as.tree" },
                { "COMMA", "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"COMMA", 683}
            },
            {}
          },
          { /* State 602 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 684}
            }
          },
          { /* State 603 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 685}
            }
          },
          { /* State 604 */
            {
              Context(
                "primitive.foreign.constant",
                { "FCONSTANT", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA" },
                { "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 687}
            }
          },
          { /* State 605 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 688}
            }
          },
          { /* State 606 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 689}
            }
          },
          { /* State 607 */
            {
              Context(
                "primitive.foreign.variable",
                { "FVARIABLE", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA" },
                { "primitive.string.tag.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 590},
              {"TAGSTRING", 591}
            },
            {
              {"primitive.string.tag", 592},
              {"primitive.string.tag.as.tree", 691}
            }
          },
          { /* State 608 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 692},
              {"REC", 311}
            },
            {}
          },
          { /* State 609 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 693}
            },
            {}
          },
          { /* State 610 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 694},
              {"REC", 311}
            },
            {}
          },
          { /* State 611 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 695},
              {"REC", 311}
            },
            {}
          },
          { /* State 612 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 696}
            },
            {}
          },
          { /* State 613 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 697},
              {"REC", 311}
            },
            {}
          },
          { /* State 614 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 698},
              {"REC", 311}
            },
            {}
          },
          { /* State 615 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 699}
            },
            {}
          },
          { /* State 616 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 700},
              {"REC", 311}
            },
            {}
          },
          { /* State 617 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 701}
            },
            {}
          },
          { /* State 618 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"RPAR", 702}
            },
            {}
          },
          { /* State 619 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "primitive.ui.vgroup",
                { "VGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 703}
            },
            {}
          },
          { /* State 620 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 704}
            },
            {}
          },
          { /* State 621 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"RPAR", 705}
            },
            {}
          },
          { /* State 622 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "primitive.ui.hgroup",
                { "HGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 706}
            },
            {}
          },
          { /* State 623 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 707}
            },
            {}
          },
          { /* State 624 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"RPAR", 708}
            },
            {}
          },
          { /* State 625 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "primitive.ui.tgroup",
                { "TGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 709}
            },
            {}
          },
          { /* State 626 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 710},
              {"REC", 311}
            },
            {}
          },
          { /* State 627 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 711}
            },
            {}
          },
          { /* State 628 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 712},
              {"REC", 311}
            },
            {}
          },
          { /* State 629 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 713},
              {"REC", 311}
            },
            {}
          },
          { /* State 630 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 714}
            },
            {}
          },
          { /* State 631 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 715},
              {"REC", 311}
            },
            {}
          },
          { /* State 632 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339}
            },
            {}
          },
          { /* State 633 */
            {
              Context(
                "expression",
                { "expression.composition" },
                {}
              ),
              Context(
                "primitive.signal.source.soundfile",
                { "SOUNDFILE", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 716}
            },
            {}
          },
          { /* State 634 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LPAR", 717}
            },
            {}
          },
          { /* State 635 */
            {
              Context(
                "expression.lambda.params.append",
                { "expression.lambda.params", "COMMA", "statement.box.identifier.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 636 */
            {
              Context(
                "expression.lambda",
                { "LAMBDA", "LPAR", "expression.lambda.params", "RPAR", "DOT" },
                { "LPAR", "expression", "RPAR" }
              )
            },
            {
              {"LPAR", 718}
            },
            {}
          },
          { /* State 637 */
            {
              Context(
                "primitive.type.number.list.append.as.tree",
                { "primitive.type.number.list.as.tree", "COMMA", "primitive.type.number.list.member.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 638 */
            {
              Context(
                "primitive.signal.route.implied.connections",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg" },
                { "RPAR" }
              ),
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"COMMA", 719},
              {"RPAR", 720}
            },
            {}
          },
          { /* State 639 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 721},
              {"REC", 311}
            },
            {}
          },
          { /* State 640 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "expression.iterate.sequence",
                { "ISEQ", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 722},
              {"REC", 311}
            },
            {}
          },
          { /* State 641 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "expression.iterate.sum",
                { "ISUM", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 723},
              {"REC", 311}
            },
            {}
          },
          { /* State 642 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "expression.iterate.product",
                { "IPROD", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 724},
              {"REC", 311}
            },
            {}
          },
          { /* State 643 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ARROW", 725}
            },
            {}
          },
          { /* State 644 */
            {
              Context(
                "statement.signal.pattern.rule",
                { "LPAR", "statement.definition.function.args", "RPAR" },
                { "ARROW", "expression", "statement.terminal" }
              )
            },
            {
              {"ARROW", 726}
            },
            {}
          },
          { /* State 645 */
            {
              Context(
                "statement.definition.list.append.qualified",
                { "statement.definition.list", "statement.math.precision.list", "statement.definition" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 646 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 647 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 648 */
            {
              Context(
                "statement.definition.with",
                { "expression", "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 649 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 650 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 473},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.definition.list", 727},
              {"statement.definition.list.start", 475},
              {"statement.definition.list.start.qualified", 476},
              {"statement.definition.list.append", 477},
              {"statement.definition.list.append.qualified", 478},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 479},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 651 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 728}
            }
          },
          { /* State 652 */
            {
              Context(
                "expression.letrec.equation.name",
                { "DELAY1", "statement.box.identifier.as.tree" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 653 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"DEF", 651}
            },
            {}
          },
          { /* State 654 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 655 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC", "LBRAQ", "expression.letrec.list", "WHERE" },
                { "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 473},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.definition.list", 730},
              {"statement.definition.list.start", 475},
              {"statement.definition.list.start.qualified", 476},
              {"statement.definition.list.append", 477},
              {"statement.definition.list.append.qualified", 478},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 479},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 656 */
            {
              Context(
                "expression.letrec.list.append",
                { "expression.letrec.list", "expression.letrec.equation" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 657 */
            {
              Context(
                "expression.letrec.equation",
                { "expression.letrec.equation.name", "DEF" },
                { "expression", "statement.terminal" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 732},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 658 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 659 */
            {
              Context(
                "doc.attribute.definition.dependencies",
                { "LSTDEPENDENCIES", "LSTEQ", "LSTQ", "doc.attribute.value", "LSTQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 660 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 661 */
            {
              Context(
                "doc.attribute.definition.doc.tags",
                { "LSTMDOCTAGS", "LSTEQ", "LSTQ", "doc.attribute.value", "LSTQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 662 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 663 */
            {
              Context(
                "doc.attribute.definition.distributed",
                { "LSTDISTRIBUTED", "LSTEQ", "LSTQ", "doc.attribute.value", "LSTQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 664 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 733}
            }
          },
          { /* State 665 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"OR", 734},
              {"LPAR", 735}
            },
            {}
          },
          { /* State 666 */
            {
              Context(
                "primitive.type.cast.any",
                { "ANYCAST" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 667 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 668 */
            {
              Context(
                "primitive.type.list.start",
                { "primitive.type" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 669 */
            {
              Context(
                "primitive.type",
                { "primitive.type.cast.number" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 670 */
            {
              Context(
                "primitive.type",
                { "primitive.type.cast.any" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 671 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 737}
            },
            {}
          },
          { /* State 672 */
            {
              Context(
                "primitive.type.list",
                { "primitive.type.list.start" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 673 */
            {
              Context(
                "primitive.type.list",
                { "primitive.type.list.append" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 674 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"OR", 738},
              {"LPAR", 739}
            },
            {}
          },
          { /* State 675 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 676 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 740}
            },
            {}
          },
          { /* State 677 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"OR", 741},
              {"LPAR", 742}
            },
            {}
          },
          { /* State 678 */
            {
              Context(
                "primitive.foreign.function.signature.names.2.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree" },
                { "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree" },
                { "LPAR", "primitive.type.list", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree" },
                { "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree" },
                { "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              )
            },
            {
              {"OR", 743},
              {"LPAR", 744}
            },
            {}
          },
          { /* State 679 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 745}
            },
            {}
          },
          { /* State 680 */
            {
              Context(
                "primitive.foreign.function.signature.names.1.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 681 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              ),
              Context(
                "primitive.foreign.function.signature.names.1.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list" },
                { "RPAR" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 746}
            },
            {}
          },
          { /* State 682 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 747}
            }
          },
          { /* State 683 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION", "LPAR", "primitive.foreign.function.signature", "COMMA", "primitive.string.tag.as.tree", "COMMA" },
                { "primitive.string.unquoted.as.tree", "RPAR" }
              )
            },
            {
              {"STRING", 239}
            },
            {
              {"primitive.string.unquoted", 240},
              {"primitive.string.unquoted.as.tree", 749}
            }
          },
          { /* State 684 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 750}
            },
            {}
          },
          { /* State 685 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 751}
            },
            {}
          },
          { /* State 686 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 752}
            },
            {}
          },
          { /* State 687 */
            {
              Context(
                "primitive.foreign.constant",
                { "FCONSTANT", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 753}
            },
            {}
          },
          { /* State 688 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 754}
            },
            {}
          },
          { /* State 689 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 755}
            },
            {}
          },
          { /* State 690 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 756}
            },
            {}
          },
          { /* State 691 */
            {
              Context(
                "primitive.foreign.variable",
                { "FVARIABLE", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 757}
            },
            {}
          },
          { /* State 692 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 758},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 693 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 759},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 694 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 761},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 695 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 762},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 696 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 763},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 697 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 765},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 698 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 766},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 699 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 767},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 700 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 769},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 701 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 702 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 703 */
            {
              Context(
                "primitive.ui.vgroup",
                { "VGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 704 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 705 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 706 */
            {
              Context(
                "primitive.ui.hgroup",
                { "HGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 707 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 708 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 709 */
            {
              Context(
                "primitive.ui.tgroup",
                { "TGROUP", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 710 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 770},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 711 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 771},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 712 */
            {
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 773},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 713 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 774},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 714 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 775},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 715 */
            {
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 777},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 716 */
            {
              Context(
                "primitive.signal.source.soundfile",
                { "SOUNDFILE", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 717 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 778},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 718 */
            {
              Context(
                "expression.lambda",
                { "LAMBDA", "LPAR", "expression.lambda.params", "RPAR", "DOT", "LPAR" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 780},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 719 */
            {
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 781},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 720 */
            {
              Context(
                "primitive.signal.route.implied.connections",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 721 */
            {
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 782},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 722 */
            {
              Context(
                "expression.iterate.sequence",
                { "ISEQ", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 783},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 723 */
            {
              Context(
                "expression.iterate.sum",
                { "ISUM", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 784},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 724 */
            {
              Context(
                "expression.iterate.product",
                { "IPROD", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 785},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 725 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 786},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 726 */
            {
              Context(
                "statement.signal.pattern.rule",
                { "LPAR", "statement.definition.function.args", "RPAR", "ARROW" },
                { "expression", "statement.terminal" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression", 788},
              {"expression.component", 148},
              {"expression.composition", 233},
              {"expression.composition.parallel", 234},
              {"expression.composition.serial", 235},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.letrec", 236},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.definition.with", 237},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 727 */
            {
              Context(
                "statement.definition.list.append",
                { "statement.definition.list" },
                { "statement.definition" }
              ),
              Context(
                "statement.definition.list.append.qualified",
                { "statement.definition.list" },
                { "statement.math.precision.list", "statement.definition" }
              )
            },
            {
              {"RBRAQ", 789},
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 565},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 566},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 728 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 729 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"ENDDEF", 31},
              {"LPAR", 32},
              {"RBRAQ", 790},
              {"DEF", 33},
              {"ENDL", 34}
            },
            {
              {"statement.definition.assignment.operator", 35},
              {"statement.terminal", 36}
            }
          },
          { /* State 730 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list" },
                { "RBRAQ" }
              ),
              Context(
                "statement.definition.list.append",
                { "statement.definition.list" },
                { "statement.definition" }
              ),
              Context(
                "statement.definition.list.append.qualified",
                { "statement.definition.list" },
                { "statement.math.precision.list", "statement.definition" }
              )
            },
            {
              {"RBRAQ", 791},
              {"IDENT", 3},
              {"FLOATMODE", 5},
              {"DOUBLEMODE", 6},
              {"QUADMODE", 7},
              {"FIXEDPOINTMODE", 8}
            },
            {
              {"statement.definition", 565},
              {"statement.definition.function.declaration", 13},
              {"statement.definition.function", 14},
              {"statement.definition.assignment", 15},
              {"statement.box.identifier.as.tree", 19},
              {"statement.math.precision", 26},
              {"statement.math.precision.list", 566},
              {"statement.math.precision.list.start", 28},
              {"statement.math.precision.list.append", 29}
            }
          },
          { /* State 731 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336}
            },
            {}
          },
          { /* State 732 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "expression.letrec.equation",
                { "expression.letrec.equation.name", "DEF", "expression" },
                { "statement.terminal" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 792}
            }
          },
          { /* State 733 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 793}
            },
            {}
          },
          { /* State 734 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 794}
            }
          },
          { /* State 735 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 795}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 796},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 736 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list", "COMMA" },
                { "primitive.type" }
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666}
            },
            {
              {"primitive.type", 797},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670}
            }
          },
          { /* State 737 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 738 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 798}
            }
          },
          { /* State 739 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 799}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 800},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 740 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 741 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 801}
            }
          },
          { /* State 742 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 802}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 803},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 743 */
            {
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR" },
                { "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR" },
                { "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" }
              )
            },
            {
              {"IDENT", 499}
            },
            {
              {"statement.foreign.function.identifier.as.tree", 805}
            }
          },
          { /* State 744 */
            {
              Context(
                "primitive.foreign.function.signature.names.2.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR" },
                { "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR" },
                { "primitive.type.list", "RPAR" }
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 807}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 808},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 745 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 746 */
            {
              Context(
                "primitive.foreign.function.signature.names.1.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 747 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 809}
            },
            {}
          },
          { /* State 748 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 810}
            },
            {}
          },
          { /* State 749 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION", "LPAR", "primitive.foreign.function.signature", "COMMA", "primitive.string.tag.as.tree", "COMMA", "primitive.string.unquoted.as.tree" },
                { "RPAR" }
              )
            },
            {
              {"RPAR", 811}
            },
            {}
          },
          { /* State 750 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 751 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 752 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 753 */
            {
              Context(
                "primitive.foreign.constant",
                { "FCONSTANT", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 754 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 755 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 756 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 757 */
            {
              Context(
                "primitive.foreign.variable",
                { "FVARIABLE", "LPAR", "primitive.type.cast.number", "statement.identifier.as.tree", "COMMA", "primitive.string.tag.as.tree", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 758 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 812},
              {"REC", 311}
            },
            {}
          },
          { /* State 759 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 813},
              {"REC", 311}
            },
            {}
          },
          { /* State 760 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 814}
            },
            {}
          },
          { /* State 761 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 815},
              {"REC", 311}
            },
            {}
          },
          { /* State 762 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 816},
              {"REC", 311}
            },
            {}
          },
          { /* State 763 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 817},
              {"REC", 311}
            },
            {}
          },
          { /* State 764 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 818}
            },
            {}
          },
          { /* State 765 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 819},
              {"REC", 311}
            },
            {}
          },
          { /* State 766 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 820},
              {"REC", 311}
            },
            {}
          },
          { /* State 767 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 821},
              {"REC", 311}
            },
            {}
          },
          { /* State 768 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 822}
            },
            {}
          },
          { /* State 769 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 823},
              {"REC", 311}
            },
            {}
          },
          { /* State 770 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 824}
            },
            {}
          },
          { /* State 771 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 825}
            },
            {}
          },
          { /* State 772 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 826}
            },
            {}
          },
          { /* State 773 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 827}
            },
            {}
          },
          { /* State 774 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 828}
            },
            {}
          },
          { /* State 775 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 829}
            },
            {}
          },
          { /* State 776 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 830}
            },
            {}
          },
          { /* State 777 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 831}
            },
            {}
          },
          { /* State 778 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 832}
            },
            {}
          },
          { /* State 779 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"WITH", 336},
              {"RPAR", 833}
            },
            {}
          },
          { /* State 780 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.lambda",
                { "LAMBDA", "LPAR", "expression.lambda.params", "RPAR", "DOT", "LPAR", "expression" },
                { "RPAR" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 834}
            },
            {}
          },
          { /* State 781 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 835}
            },
            {}
          },
          { /* State 782 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 836}
            },
            {}
          },
          { /* State 783 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.iterate.sequence",
                { "ISEQ", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 837}
            },
            {}
          },
          { /* State 784 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.iterate.sum",
                { "ISUM", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 838}
            },
            {}
          },
          { /* State 785 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.iterate.product",
                { "IPROD", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression" },
                { "RPAR" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"RPAR", 839}
            },
            {}
          },
          { /* State 786 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 840}
            }
          },
          { /* State 787 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 336},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 841}
            }
          },
          { /* State 788 */
            {
              Context(
                "expression.composition.parallel",
                { "expression" },
                { "COMMA", "expression" }
              ),
              Context(
                "expression.letrec",
                { "expression" },
                { "LETREC", "LBRAQ", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "RBRAQ" }
              ),
              Context(
                "                 ",
                { "expression" },
                { "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.definition.with",
                { "expression" },
                { "WITH", "LBRAQ", "statement.definition.list", "RBRAQ" }
              ),
              Context(
                "statement.signal.pattern.rule",
                { "LPAR", "statement.definition.function.args", "RPAR", "ARROW", "expression" },
                { "statement.terminal" }
              )
            },
            {
              {"ENDOFINPUT", 30},
              {"WITH", 337},
              {"LETREC", 338},
              {"COMMA", 339},
              {"ENDDEF", 31},
              {"ENDL", 34}
            },
            {
              {"statement.terminal", 843}
            }
          },
          { /* State 789 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 790 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 791 */
            {
              Context(
                "expression.letrec",
                { "expression", "LETREC", "LBRAQ", "expression.letrec.list", "WHERE", "statement.definition.list", "RBRAQ" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 792 */
            {
              Context(
                "expression.letrec.equation",
                { "expression.letrec.equation.name", "DEF", "expression", "statement.terminal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 793 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 794 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LPAR", 844}
            },
            {}
          },
          { /* State 795 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 796 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 845}
            },
            {}
          },
          { /* State 797 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list", "COMMA", "primitive.type" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 798 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LPAR", 846}
            },
            {}
          },
          { /* State 799 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 800 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 847}
            },
            {}
          },
          { /* State 801 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LPAR", 848}
            },
            {}
          },
          { /* State 802 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 803 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 849}
            },
            {}
          },
          { /* State 804 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LPAR", 850}
            },
            {}
          },
          { /* State 805 */
            {
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree" },
                { "LPAR", "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree" },
                { "LPAR", "primitive.type.list", "RPAR" }
              )
            },
            {
              {"LPAR", 851}
            },
            {}
          },
          { /* State 806 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 852}
            },
            {}
          },
          { /* State 807 */
            {
              Context(
                "primitive.foreign.function.signature.names.2.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 808 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              ),
              Context(
                "primitive.foreign.function.signature.names.2.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list" },
                { "RPAR" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 853}
            },
            {}
          },
          { /* State 809 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 810 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 811 */
            {
              Context(
                "primitive.foreign.function",
                { "FFUNCTION", "LPAR", "primitive.foreign.function.signature", "COMMA", "primitive.string.tag.as.tree", "COMMA", "primitive.string.unquoted.as.tree", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 812 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 854},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 813 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 855},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 814 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 856},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 815 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 858},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 816 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 859},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 817 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 860},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 818 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 861},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 819 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 863},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 820 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 864},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 821 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 865},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 822 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 866},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 823 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 868},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 824 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 825 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 826 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 827 */
            {
              Context(
                "primitive.ui.hbargraph",
                { "HBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 828 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 829 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 830 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 831 */
            {
              Context(
                "primitive.ui.vbargraph",
                { "VBARGRAPH", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 832 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 833 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 834 */
            {
              Context(
                "expression.lambda",
                { "LAMBDA", "LPAR", "expression.lambda.params", "RPAR", "DOT", "LPAR", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 835 */
            {
              Context(
                "primitive.signal.route.explicit",
                { "ROUTE", "LPAR", "statement.definition.function.arg", "COMMA", "statement.definition.function.arg", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 836 */
            {
              Context(
                "expression.iterate.parallel",
                { "ITERATE_PARALLEL", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 837 */
            {
              Context(
                "expression.iterate.sequence",
                { "ISEQ", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 838 */
            {
              Context(
                "expression.iterate.sum",
                { "ISUM", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 839 */
            {
              Context(
                "expression.iterate.product",
                { "IPROD", "LPAR", "statement.box.identifier.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 840 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 841 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 842 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 843 */
            {
              Context(
                "statement.signal.pattern.rule",
                { "LPAR", "statement.definition.function.args", "RPAR", "ARROW", "expression", "statement.terminal" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 844 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 869}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 870},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 845 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 846 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 871}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 872},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 847 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 848 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 873}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 874},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 849 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 850 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 875}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 876},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 851 */
            {
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR" },
                { "RPAR" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR" },
                { "primitive.type.list", "RPAR" }
              )
            },
            {
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"ANYCAST", 666},
              {"RPAR", 878}
            },
            {
              {"primitive.type", 668},
              {"primitive.type.cast.number", 669},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.type.cast.any", 670},
              {"primitive.type.list", 879},
              {"primitive.type.list.start", 672},
              {"primitive.type.list.append", 673}
            }
          },
          { /* State 852 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 853 */
            {
              Context(
                "primitive.foreign.function.signature.names.2.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 854 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 880},
              {"REC", 311}
            },
            {}
          },
          { /* State 855 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 881},
              {"REC", 311}
            },
            {}
          },
          { /* State 856 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 882},
              {"REC", 311}
            },
            {}
          },
          { /* State 857 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 883}
            },
            {}
          },
          { /* State 858 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 884},
              {"REC", 311}
            },
            {}
          },
          { /* State 859 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 885},
              {"REC", 311}
            },
            {}
          },
          { /* State 860 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 886},
              {"REC", 311}
            },
            {}
          },
          { /* State 861 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 887},
              {"REC", 311}
            },
            {}
          },
          { /* State 862 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 888}
            },
            {}
          },
          { /* State 863 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 889},
              {"REC", 311}
            },
            {}
          },
          { /* State 864 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 890},
              {"REC", 311}
            },
            {}
          },
          { /* State 865 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 891},
              {"REC", 311}
            },
            {}
          },
          { /* State 866 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 892},
              {"REC", 311}
            },
            {}
          },
          { /* State 867 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"COMMA", 893}
            },
            {}
          },
          { /* State 868 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "COMMA", "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"COMMA", 894},
              {"REC", 311}
            },
            {}
          },
          { /* State 869 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 870 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 895}
            },
            {}
          },
          { /* State 871 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 872 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 896}
            },
            {}
          },
          { /* State 873 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 874 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 897}
            },
            {}
          },
          { /* State 875 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 876 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 898}
            },
            {}
          },
          { /* State 877 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 899}
            },
            {}
          },
          { /* State 878 */
            {
              Context(
                "primitive.foreign.function.signature.names.3.args.0",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 879 */
            {
              Context(
                "primitive.type.list.append",
                { "primitive.type.list" },
                { "COMMA", "primitive.type" }
              ),
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list" },
                { "RPAR" }
              )
            },
            {
              {"COMMA", 736},
              {"RPAR", 900}
            },
            {}
          },
          { /* State 880 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 901},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 881 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 902},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 882 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 903},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 883 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 904},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 884 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 906},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 885 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 907},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 886 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 908},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 887 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 909},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 888 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 910},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 889 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 912},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 890 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 913},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 891 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 914},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 892 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 915},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 893 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 916},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 894 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA" },
                { "expression.composition.serial", "RPAR" }
              )
            },
            {
              {"LT", 64},
              {"LE", 65},
              {"EQ", 66},
              {"GT", 67},
              {"GE", 68},
              {"NE", 69},
              {"ADD", 70},
              {"SUB", 71},
              {"OR", 72},
              {"MUL", 73},
              {"DIV", 74},
              {"MOD", 75},
              {"AND", 76},
              {"XOR", 77},
              {"LSH", 78},
              {"RSH", 79},
              {"POWOP", 80},
              {"FDELAY", 81},
              {"MEM", 82},
              {"PREFIX", 83},
              {"INTCAST", 84},
              {"FLOATCAST", 85},
              {"FFUNCTION", 86},
              {"FCONSTANT", 87},
              {"FVARIABLE", 88},
              {"BUTTON", 89},
              {"CHECKBOX", 90},
              {"VSLIDER", 91},
              {"HSLIDER", 92},
              {"NENTRY", 93},
              {"VGROUP", 94},
              {"HGROUP", 95},
              {"TGROUP", 96},
              {"HBARGRAPH", 97},
              {"VBARGRAPH", 98},
              {"SOUNDFILE", 99},
              {"ATTACH", 100},
              {"ACOS", 101},
              {"ASIN", 102},
              {"ATAN", 103},
              {"ATAN2", 104},
              {"COS", 105},
              {"SIN", 106},
              {"TAN", 107},
              {"EXP", 108},
              {"LOG", 109},
              {"LOG10", 110},
              {"POWFUN", 111},
              {"SQRT", 112},
              {"ABS", 113},
              {"MIN", 114},
              {"MAX", 115},
              {"FMOD", 116},
              {"REMAINDER", 117},
              {"FLOOR", 118},
              {"CEIL", 119},
              {"RINT", 120},
              {"RDTBL", 121},
              {"RWTBL", 122},
              {"SELECT2", 123},
              {"SELECT3", 124},
              {"INT", 125},
              {"FLOAT", 126},
              {"LAMBDA", 127},
              {"WIRE", 128},
              {"CUT", 129},
              {"LPAR", 130},
              {"COMPONENT", 131},
              {"LIBRARY", 132},
              {"ENVIRONMENT", 133},
              {"WAVEFORM", 134},
              {"ROUTE", 135},
              {"ENABLE", 136},
              {"CONTROL", 137},
              {"ITERATE_PARALLEL", 138},
              {"ISEQ", 139},
              {"ISUM", 140},
              {"IPROD", 141},
              {"INPUTS", 142},
              {"OUTPUTS", 143},
              {"IDENT", 3},
              {"CASE", 144},
              {"ASSERTBOUNDS", 145},
              {"LOWEST", 146},
              {"HIGHEST", 147}
            },
            {
              {"expression.component", 148},
              {"expression.composition.serial", 918},
              {"expression.composition.mix", 150},
              {"expression.composition.recursive", 151},
              {"expression.composition.sequence", 152},
              {"expression.composition.split", 153},
              {"expression.environment", 154},
              {"expression.infix", 155},
              {"expression.infix.definitions.substitution", 156},
              {"expression.infix.environment.access", 157},
              {"expression.infix.math", 158},
              {"expression.infix.math.algebra", 159},
              {"expression.infix.math.comparison", 160},
              {"expression.infix.math.logic", 161},
              {"expression.infix.math.shift", 162},
              {"expression.infix.prefix", 163},
              {"expression.infix.signal.delay", 164},
              {"expression.iterate.parallel", 165},
              {"expression.iterate.sequence", 166},
              {"expression.iterate.sum", 167},
              {"expression.iterate.product", 168},
              {"expression.lambda", 169},
              {"expression.library", 170},
              {"expression.math", 171},
              {"expression.math.comparison", 172},
              {"expression.math.rounding", 173},
              {"expression.math.signal", 174},
              {"expression.math.signal.algebra", 175},
              {"expression.math.signal.shift", 176},
              {"expression.math.signal.power", 177},
              {"expression.math.scalar.as.tree", 178},
              {"expression.math.scalar.int", 179},
              {"expression.math.scalar.int.as.tree", 180},
              {"expression.math.scalar.float", 181},
              {"expression.math.scalar.float.as.tree", 182},
              {"expression.math.trigonometry.as.tree", 183},
              {"expression.parenthesis", 184},
              {"expression.signal", 185},
              {"expression.signal.control", 186},
              {"expression.signal.delay", 187},
              {"expression.signal.logic", 188},
              {"primitive", 189},
              {"primitive.foreign", 190},
              {"primitive.type.number.as.tree", 191},
              {"primitive.type.number.int", 192},
              {"primitive.type.number.float", 193},
              {"primitive.type.number.int.as.tree", 194},
              {"primitive.type.number.float.as.tree", 195},
              {"primitive.signal", 196},
              {"primitive.signal.input.wire", 197},
              {"primitive.signal.input.terminate", 198},
              {"primitive.type.cast.number", 199},
              {"primitive.type.cast.number.int", 200},
              {"primitive.type.cast.number.float", 201},
              {"primitive.signal.route", 202},
              {"primitive.signal.route.implied.outputs", 203},
              {"primitive.signal.route.implied.connections", 204},
              {"primitive.signal.route.explicit", 205},
              {"primitive.signal.source", 206},
              {"primitive.signal.source.table", 207},
              {"primitive.signal.source.soundfile", 208},
              {"primitive.signal.source.waveform.as.tree", 209},
              {"primitive.ui", 210},
              {"primitive.ui.button", 211},
              {"primitive.ui.checkbox", 212},
              {"primitive.ui.vslider", 213},
              {"primitive.ui.hslider", 214},
              {"primitive.ui.nentry", 215},
              {"primitive.ui.vgroup", 216},
              {"primitive.ui.hgroup", 217},
              {"primitive.ui.tgroup", 218},
              {"primitive.ui.vbargraph", 219},
              {"primitive.ui.hbargraph", 220},
              {"primitive.foreign.function", 221},
              {"primitive.foreign.constant", 222},
              {"primitive.foreign.variable", 223},
              {"primitive.signal.inputs", 224},
              {"primitive.signal.outputs", 225},
              {"statement.box.identifier.as.tree", 230}
            }
          },
          { /* State 895 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 896 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 897 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 898 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 899 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 900 */
            {
              Context(
                "primitive.foreign.function.signature.names.3.args.list",
                { "primitive.type.cast.number", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "OR", "statement.foreign.function.identifier.as.tree", "LPAR", "primitive.type.list", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 901 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 919}
            },
            {}
          },
          { /* State 902 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 920}
            },
            {}
          },
          { /* State 903 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 921}
            },
            {}
          },
          { /* State 904 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 922}
            },
            {}
          },
          { /* State 905 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 923}
            },
            {}
          },
          { /* State 906 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 924}
            },
            {}
          },
          { /* State 907 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 925}
            },
            {}
          },
          { /* State 908 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 926}
            },
            {}
          },
          { /* State 909 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 927}
            },
            {}
          },
          { /* State 910 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 928}
            },
            {}
          },
          { /* State 911 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 929}
            },
            {}
          },
          { /* State 912 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 930}
            },
            {}
          },
          { /* State 913 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 931}
            },
            {}
          },
          { /* State 914 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 932}
            },
            {}
          },
          { /* State 915 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 933}
            },
            {}
          },
          { /* State 916 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 934}
            },
            {}
          },
          { /* State 917 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {
              {"RPAR", 935}
            },
            {}
          },
          { /* State 918 */
            {
              Context(
                "expression.composition.mix",
                { "expression.composition.serial" },
                { "MIX", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.recursive",
                { "expression.composition.serial" },
                { "REC", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.sequence",
                { "expression.composition.serial" },
                { "SEQ", "expression.composition.serial" }
              ),
              Context(
                "expression.composition.split",
                { "expression.composition.serial" },
                { "SPLIT", "expression.composition.serial" }
              ),
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial" },
                { "RPAR" }
              )
            },
            {
              {"SPLIT", 308},
              {"MIX", 309},
              {"SEQ", 310},
              {"REC", 311},
              {"RPAR", 936}
            },
            {}
          },
          { /* State 919 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 920 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 921 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 922 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 923 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 924 */
            {
              Context(
                "primitive.ui.vslider",
                { "VSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 925 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 926 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 927 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 928 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 929 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 930 */
            {
              Context(
                "primitive.ui.hslider",
                { "HSLIDER", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" },
                {}
              )
            },
            {},
            {}
          },
          { /* State 931 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 932 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 933 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 934 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 935 */
            {
              Context(
                "error",
                {},
                {}
              )
            },
            {},
            {}
          },
          { /* State 936 */
            {
              Context(
                "primitive.ui.nentry",
                { "NENTRY", "LPAR", "primitive.string.unquoted.as.tree", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "COMMA", "expression.composition.serial", "RPAR" },
                {}
              )
            },
            {},
            {}
          }
          /* std::vector<std::map<std::string,int>> */
        };
        return transitions_map;
      }

    }
  }
}
