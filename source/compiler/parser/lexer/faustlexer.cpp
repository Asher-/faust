#line 1 "lexer/faustlexer.cpp"

#line 3 "lexer/faustlexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 157
#define YY_END_OF_BUFFER 158
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[626] =
    {   0,
        0,    0,    2,    2,    0,    0,    0,    0,  158,  156,
      155,  155,   66,  156,   51,   54,   53,   69,   70,   49,
       47,   42,   48,   76,   50,   29,   41,   67,   59,   68,
       61,   52,  150,   73,   75,   74,  114,   65,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,   71,   55,
       72,   46,    2,    5,    6,    3,    9,   10,    9,    9,
      157,   27,  157,   26,  157,  157,  157,  157,  155,   64,
        0,  151,   44,   37,    1,  154,   31,   29,    0,   30,
        0,   45,    0,    0,   43,   57,   60,  153,    0,    0,

       63,  141,   62,   58,  150,    0,  150,    0,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,    2,    4,    3,    3,    7,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,   38,  154,   31,    0,   32,    0,   35,  149,    0,
        0,    0,    0,    0,    0,    0,  117,  150,   84,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  108,
      150,  150,  150,  150,  111,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,   82,  150,  150,
      112,  150,  119,   80,  118,  150,  150,  126,  115,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  125,  109,
      150,  150,  127,  110,  150,  150,  150,  150,  150,  150,
      150,   56,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   39,    0,   33,   36,  149,    0,  152,    0,
        0,    0,    0,  150,    0,  104,  105,  150,  106,  150,
      150,  140,  123,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  120,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      128,  150,  150,  150,  124,  150,  150,  150,  150,  150,
      116,  150,  150,  150,  150,  150,  150,   77,    0,    0,
        0,    0,    0,    0,    0,    0,   21,   40,   34,    0,
        0,    0,    0,    0,  150,  150,  107,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,   83,
      122,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      113,  150,  150,  150,  150,  150,  150,  150,  136,  150,
      150,  150,  150,  150,  150,  150,  150,  150,   79,    0,

        0,    0,    0,    0,    0,   22,    0,  149,    0,    0,
        0,    0,    8,  150,  103,   92,  150,  150,  150,  150,
      150,  137,  150,  150,  150,  150,  150,  150,   98,  150,
      150,  131,  129,   78,  150,  143,   96,  150,   81,  150,
      150,  150,  150,  150,  150,  150,   99,  150,   97,  150,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      149,    0,    0,    0,  150,  150,  150,  138,  139,  150,
      150,  150,  150,  150,  150,  150,  144,   95,  133,  130,
      150,   85,  150,   86,   87,   88,  150,  150,  150,   94,
      150,   20,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  150,   93,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  135,   13,
        0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
        0,  150,  132,  150,  150,   90,   89,  150,   91,  101,
      150,  121,  150,  102,  100,    0,   11,    0,    0,    0,
        0,    0,    0,    0,    0,  150,  150,  150,  150,  150,
      150,   12,    0,    0,    0,    0,    0,    0,    0,    0,
      150,  150,  134,  150,  150,  150,    0,    0,    0,    0,
       25,    0,    0,    0,  142,  150,  150,  150,  150,    0,
        0,    0,   23,    0,    0,    0,  150,  150,  147,  150,

        0,    0,    0,   17,    0,    0,  150,  150,  150,    0,
       14,   18,   15,   19,  146,  150,  145,    0,  150,    0,
      150,   16,  150,  148,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,    1,   29,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       31,   32,   33,   34,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   30,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   30,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    4,    4,    5,    5,
        5,    5,    5,    6,    1,    4,    4,    4,    1,    7,
        1,    1,    1,    1,    8,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[643] =
    {   0,
        0,    0,   61,   63,   65,   66,   63,   66, 1178, 1179,
       75,   83, 1150, 1169, 1179, 1179, 1179, 1179, 1179, 1179,
     1147, 1179, 1179,  102,   76,  109,   47, 1179,  116,   55,
       71, 1179, 1150, 1179, 1179, 1179, 1179, 1138,  114,   48,
      117,   87,  111,  132,  140,   71,  131,  150,   76,   82,
      159,   84,  157,  175,  167,  163,  174,  123, 1179, 1179,
     1179, 1179,    0, 1168, 1179,   96, 1179, 1179,  174, 1118,
     1179, 1179, 1142, 1179,  114, 1133, 1129, 1115,  229, 1179,
     1159, 1179, 1179,  216, 1179,    0,  221,  228,  244, 1179,
     1130, 1179,    0,  231, 1179, 1179, 1179, 1179,  255, 1125,

     1179, 1179, 1179, 1179, 1139, 1138, 1137, 1125,  199,  178,
      229,  231,  250,   91,  201,  141,  188,  252,  183,  222,
      256,  235,  180,  263,   88,  265,  266,  267,  270,  137,
      269,  271,  272,  273,  274,  283,  277,  278,  284,  285,
      289,  286,  292,  297,  301,  302,  305,  300,  308,  306,
      311,  318,  315,  319,  321,  324,  322,  325,  331,  327,
      329,  328,  336,  333,  334,    0, 1179,  365,  367, 1179,
     1112, 1114, 1108, 1123, 1179, 1105, 1101, 1107, 1103, 1096,
      374, 1179,    0,  379,  389, 1179,  394,  402, 1126, 1114,
     1120, 1103, 1095, 1105, 1095, 1108, 1118,  338, 1117,  344,

      342,  380,  382,  383,  402,  403,  406,  405,  407, 1116,
      408,  409,  410,  412, 1115,  411,  414,  417,  415,  421,
      416,  424,  426,  428,  429,  434,  439, 1114,  441,  443,
      446,  445, 1113, 1112, 1111,  448,  450, 1110, 1109,  348,
      453,  457,  454,  455,  456,  458,  462,  463, 1108,  464,
      460,  465, 1107, 1106,  473,  475,  477,  480,  481,  483,
      485, 1105, 1089, 1074, 1072, 1112, 1084, 1069, 1069, 1083,
     1080,  494,  510,  517,  522, 1179, 1095, 1094, 1179, 1081,
     1061, 1061, 1076, 1089, 1077, 1087, 1086,  494,  499,  487,
      510, 1085, 1084,  523,  524,  525,  526,  528,  529,  530,

      531,  532,  533,  534,  537, 1083,  536,  541,  540,  545,
      542,  547,  543,  552,  554,  567,  555,  563,  569,  570,
     1082,  572,  574,  576, 1081,  577,  579,  580,  581,  582,
     1080,  578,  583,  585,  589,  588,  586, 1079, 1053, 1047,
     1056, 1073, 1050, 1045, 1056, 1041, 1179, 1179, 1179, 1059,
     1051, 1056, 1055, 1062, 1065,  595, 1064,  599,  606,  607,
      608,  610,  611,  612,  613,  615,  614,  617,  619, 1063,
     1062,  621,  622,  623,  624,  626,  627,  631,  634,  636,
     1061,  637,  638,  641,  643,  646,  654,  651, 1060,  656,
      652,  663,  655,  658,  659,  662,  665,  661, 1059, 1044,

     1037, 1042,  674, 1040, 1034, 1179, 1041, 1052, 1040, 1022,
     1019, 1033, 1179,  670, 1047, 1046,  666,  669,  680,  692,
      668, 1045,  693,  695,  696,  698,  699,  701, 1044,  700,
      703, 1043, 1042, 1041,  704, 1040, 1039,  705, 1038,  706,
      709,  711,  719,  740,  710,  721, 1037,  715, 1036,  714,
      718, 1031, 1010, 1017, 1012, 1004, 1014, 1013, 1015, 1009,
     1026, 1013, 1004, 1011,  720,  724,  728, 1022, 1021,  729,
      732,  743,  744,  733,  748,  747, 1020, 1019, 1018, 1017,
      749, 1016,  750, 1015, 1014, 1013,  751,  754,  756, 1012,
      760, 1179,  993,  778,  998,  978,  978,  983,  975,  976,

      981,  978,  972,  761, 1001,  764,  762,  765,  768,  771,
      775,  774,  777,  780,  784,  785,  786,  787, 1000, 1179,
     1005,  994,  979,  984,  983,  980,  963, 1179,  988,  967,
      978,  789,  989,  791,  793,  988,  987,  788,  986,  985,
      797,  984,  807,  983,  982,  977, 1179,  952,  949,  963,
      957,  960,  968,  970,  969,  804,  803,  808,  809,  810,
      811, 1179,  960,  951,  958,  953,  953,  938,  959,  958,
      814,  815,  964,  820,  816,  822,  940,  937,  931,  931,
     1179,  950,  905,  897,  919,  825,  824,  828,  827,  914,
      884,  861, 1179,  883,  861,  859,  829,  832,  867,  833,

      859,  861,  860, 1179,  873,  872,  836,  837,  839,  827,
     1179, 1179, 1179, 1179,  855,  842,  853,  348,  849,  200,
      834, 1179,  850,  124, 1179,  898,  906,  914,  922,  927,
      930,  932,  940,  948,  956,  958,   94,  962,  964,  968,
      970,  974
    } ;

static const flex_int16_t yy_def[643] =
    {   0,
      625,    1,  626,  626,  627,  627,  628,  628,  625,  625,
      625,  625,  625,  629,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  630,  625,
      625,  625,  631,  625,  625,  625,  625,  632,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  625,  625,
      625,  625,  633,  625,  625,  634,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      629,  625,  625,  625,  625,  635,  625,  625,  625,  625,
      636,  625,  637,  625,  625,  625,  625,  625,  630,   99,

      625,  625,  625,  625,  631,  625,  631,  632,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  633,  625,  634,  634,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  635,  625,  625,  625,  625,  625,  638,  636,
      625,  625,  625,  625,   99,  639,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  638,  625,  625,  625,
      625,  625,   99,  640,  639,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  641,
      625,  625,  625,   99,  640,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  625,

      625,  625,  625,  625,  625,  625,  625,  642,  641,  625,
      625,  625,  625,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      642,  625,  625,  625,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  631,  631,  631,  631,  631,
      631,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      631,  631,  631,  631,  631,  631,  625,  625,  625,  625,
      625,  625,  625,  625,  631,  631,  631,  631,  631,  625,
      625,  625,  625,  625,  625,  625,  631,  631,  631,  631,

      625,  625,  625,  625,  625,  625,  631,  631,  631,  625,
      625,  625,  625,  625,  631,  631,  631,  625,  631,  625,
      631,  625,  631,  631,    0,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625
    } ;

static const flex_int16_t yy_nxt[1243] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   26,
       26,   26,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   33,   45,   46,   33,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   33,   56,   57,   58,   33,   59,
       60,   61,   62,   64,   65,   64,   65,   68,   68,   72,
       91,  106,   72,   66,   92,   66,   79,   79,   79,   79,
       73,  101,  102,   73,   79,   79,   79,   79,   85,   74,
       69,   69,   74,   86,  106,   70,   70,  103,  104,  106,

      191,   75,  114,   76,   75,  106,   76,  106,  169,   77,
      106,  106,   77,  170,  106,  141,   78,  133,  134,   78,
       84,   84,   84,   84,   84,   87,  119,   88,   88,   88,
       88,   88,   93,   94,  106,  120,  142,  106,  146,   95,
      106,   96,   97,   98,  204,  218,  106,  106,   89,   90,
      109,  110,  115,  176,  106,  106,  116,  177,  121,  117,
      106,  111,  100,  106,  106,  118,  112,  113,  122,  123,
      135,  165,  124,  106,  136,  125,  129,  126,  127,  137,
      106,  130,  106,  131,  206,  138,  106,  128,  223,  139,
      106,  171,  132,  140,  143,  147,  148,  106,  106,  159,

      149,  106,  157,  106,  160,  150,  106,  144,  158,  162,
      145,  106,  622,  151,  152,  161,  163,  164,  153,  172,
      211,  173,  106,  154,  106,  155,  198,  207,  216,  156,
       79,   79,   79,   79,   84,   84,   84,   84,   84,  184,
      184,  184,  184,  184,   87,  106,   88,   88,   88,   88,
       88,  197,  106,  205,  106,  181,  182,  187,  106,  187,
      185,  186,  188,  188,  188,  188,  188,   89,   90,  192,
      193,   93,  625,  106,  200,  106,  212,  194,  625,  106,
      625,  625,   98,  201,  215,  202,  106,  199,  106,  106,
      106,  213,  106,  106,  106,  106,  106,  106,  208,  209,

      106,  106,  221,  203,  210,  222,  106,  106,  106,  106,
      224,  214,  106,  219,  220,  106,  225,  217,  231,  230,
      106,  226,  227,  106,  106,  106,  228,  229,  106,  106,
      234,  106,  235,  232,  106,  233,  236,  242,  106,  237,
      240,  106,  106,  238,  106,  106,  244,  106,  106,  241,
      106,  106,  106,  239,  106,  245,  106,  106,  243,  106,
      246,  106,  250,  248,  247,  106,  256,  106,  249,  254,
      253,  106,  252,  251,  258,  260,  255,  625,  257,  169,
      620,  288,  625,  259,  170,  262,  261,  272,  320,  272,
      286,  287,  273,  273,  273,  273,  273,  184,  184,  184,

      184,  184,  274,  106,  274,  106,  106,  275,  275,  275,
      275,  275,  188,  188,  188,  188,  188,  290,  185,  186,
      188,  188,  188,  188,  188,  106,  106,  289,  106,  106,
      106,  106,  106,  106,  106,  106,  291,  106,  106,  106,
      106,  292,  276,  294,  106,  298,  299,  106,  293,  106,
      304,  106,  106,  297,  295,  300,  303,  106,  301,  306,
      296,  302,  106,  305,  106,  316,  106,  307,  106,  106,
      310,  106,  311,  106,  309,  308,  106,  106,  106,  106,
      106,  106,  312,  106,  317,  106,  106,  106,  106,  323,
      324,  321,  314,  313,  315,  322,  106,  327,  106,  319,

      106,  318,  328,  106,  106,  329,  106,  330,  106,  325,
      106,  326,  273,  273,  273,  273,  273,  106,  331,  357,
      336,  332,  106,  335,  358,  334,  333,  338,  273,  273,
      273,  273,  273,  106,  337,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  356,  106,  106,  106,  106,
      348,  106,  106,  106,  106,  106,  106,  106,  359,  106,
      106,  363,  349,  106,  106,  106,  106,  360,  106,  368,
      106,  369,  361,  364,  365,  106,  362,  106,  106,  372,
      376,  366,  373,  367,  375,  381,  106,  370,  371,  380,
      106,  379,  106,  106,  374,  106,  378,  106,  377,  106,

      106,  106,  106,  106,  106,  106,  106,  382,  106,  106,
      387,  106,  106,  385,  383,  390,  389,  391,  106,  388,
      393,  386,  106,  384,  395,  399,  392,  397,  398,  106,
      106,  106,  394,  106,  106,  106,  106,  106,  106,  396,
      106,  415,  106,  417,  106,  106,  106,  106,  414,  106,
      106,  421,  422,  416,  106,  418,  427,  106,  419,  106,
      106,  106,  420,  423,  106,  431,  106,  424,  426,  106,
      425,  434,  429,  428,  106,  106,  430,  106,  106,  106,
      432,  106,  106,  433,  106,  106,  106,  435,  106,  106,
      436,  106,  106,  106,  438,  446,  437,  440,  442,  441,

      439,  443,  445,  106,  450,  444,  465,  447,  467,  451,
      448,  449,  455,  456,  466,  106,  106,  470,  106,  106,
      457,  106,  106,  106,  106,  468,  106,  106,  106,  106,
      472,  469,  106,  106,  106,  475,  476,  106,  106,  473,
      471,  106,  106,  106,  106,  481,  474,  106,  482,  483,
      489,  106,  106,  477,  478,  106,  106,  480,  484,  487,
      485,  486,  479,  106,  488,  490,  106,  106,  504,  491,
      106,  106,  106,  106,  106,  506,  511,  106,  508,  106,
      507,  505,  521,  106,  106,  106,  514,  106,  106,  515,
      509,  106,  510,  512,  106,  522,  513,  106,  106,  517,

      106,  534,  516,  106,  535,  518,  519,  106,  106,  106,
      106,  106,  106,  539,  106,  532,  106,  533,  537,  540,
      106,  536,  538,  541,  543,  544,  106,  106,  557,  545,
      106,  106,  106,  106,  106,  542,  556,  106,  106,  106,
      558,  559,  571,  106,  561,  106,  572,  106,  106,  560,
      106,  106,  106,  575,  576,  106,  106,  106,  574,  106,
      106,  573,  106,  598,  588,  106,  585,  586,  597,  608,
      600,  587,  106,  106,  589,  599,  106,  607,  106,  618,
      616,  609,  623,  615,  614,  613,  617,  612,  611,  610,
      106,  606,  621,  605,  619,  604,  603,  624,   63,   63,

       63,   63,   63,   63,   63,   63,   67,   67,   67,   67,
       67,   67,   67,   67,   71,   71,   71,   71,   71,   71,
       71,   71,   81,   81,   81,   81,   81,   81,   81,   81,
       99,  602,   99,   99,  105,  105,  105,  105,  107,  107,
      166,  601,  106,  166,  166,  166,  166,  166,  168,  596,
      168,  168,  168,  168,  168,  168,  183,  595,  183,  183,
      183,  183,  183,  183,  189,  189,  277,  277,  277,  277,
      284,  284,  355,  355,  355,  355,  408,  408,  461,  461,
      461,  461,  594,  593,  592,  591,  590,  106,  584,  583,
      582,  581,  580,  579,  578,  577,  570,  569,  568,  567,

      566,  565,  564,  563,  562,  106,  106,  106,  106,  106,
      106,  106,  106,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  106,  106,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  520,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  503,  502,  501,  278,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  464,  463,  462,  409,  278,  460,  459,  458,  454,
      453,  452,  106,  106,  106,  106,  106,  106,  106,  413,
      412,  411,  410,  409,  407,  406,  405,  404,  403,  402,

      401,  400,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  285,  106,  354,  353,  352,  351,  350,  278,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  285,  283,  282,  281,  280,  279,  190,  278,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  108,
      106,  196,  106,  195,  190,   82,  180,  179,  178,  175,
      174,  167,  108,  106,   83,   82,   80,  625,    9,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625
    } ;

static const flex_int16_t yy_chk[1243] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    5,    6,    7,
       27,   40,    8,    3,   27,    4,   11,   11,   11,   11,
        7,   30,   30,    8,   12,   12,   12,   12,   25,    7,
        5,    6,    8,   25,   46,    5,    6,   31,   31,   49,

      637,    7,   40,    7,    8,   50,    8,   52,   66,    7,
       42,  125,    8,   66,  114,   49,    7,   46,   46,    8,
       24,   24,   24,   24,   24,   26,   42,   26,   26,   26,
       26,   26,   29,   29,   43,   42,   50,   39,   52,   29,
       41,   29,   29,   29,  114,  125,   58,  624,   26,   26,
       39,   39,   41,   75,   47,   44,   41,   75,   43,   41,
      130,   39,   29,   45,  116,   41,   39,   39,   43,   44,
       47,   58,   44,   48,   47,   44,   45,   44,   44,   47,
       53,   45,   51,   45,  116,   48,   56,   44,  130,   48,
       55,   69,   45,   48,   51,   53,   53,   57,   54,   56,

       53,  110,   55,  123,   56,   53,  119,   51,   55,   57,
       51,  117,  620,   53,   54,   56,   57,   57,   54,   69,
      119,   69,  109,   54,  115,   54,  110,  117,  123,   54,
       79,   79,   79,   79,   84,   84,   84,   84,   84,   87,
       87,   87,   87,   87,   88,  120,   88,   88,   88,   88,
       88,  109,  111,  115,  112,   84,   84,   89,  122,   89,
       87,   87,   89,   89,   89,   89,   89,   88,   88,   94,
       94,   99,   99,  113,  112,  118,  120,   94,   99,  121,
       99,   99,   99,  112,  122,  113,  124,  111,  126,  127,
      128,  121,  131,  129,  132,  133,  134,  135,  118,  118,

      137,  138,  128,  113,  118,  129,  136,  139,  140,  142,
      131,  121,  141,  126,  127,  143,  132,  124,  137,  136,
      144,  133,  134,  148,  145,  146,  134,  135,  147,  150,
      139,  149,  140,  137,  151,  138,  141,  146,  153,  142,
      145,  152,  154,  143,  155,  157,  148,  156,  158,  145,
      160,  162,  161,  144,  159,  149,  164,  165,  147,  163,
      150,  198,  153,  152,  151,  201,  159,  200,  152,  157,
      156,  240,  155,  154,  161,  163,  158,  168,  160,  169,
      618,  201,  168,  162,  169,  165,  164,  181,  240,  181,
      198,  200,  181,  181,  181,  181,  181,  184,  184,  184,

      184,  184,  185,  202,  185,  203,  204,  185,  185,  185,
      185,  185,  187,  187,  187,  187,  187,  203,  184,  184,
      188,  188,  188,  188,  188,  205,  206,  202,  208,  207,
      209,  211,  212,  213,  216,  214,  204,  217,  219,  221,
      218,  205,  188,  207,  220,  212,  213,  222,  206,  223,
      219,  224,  225,  211,  208,  214,  218,  226,  216,  220,
      209,  217,  227,  219,  229,  231,  230,  221,  232,  231,
      224,  236,  225,  237,  223,  222,  241,  243,  244,  245,
      242,  246,  226,  251,  232,  247,  248,  250,  252,  243,
      244,  241,  229,  227,  230,  242,  255,  247,  256,  237,

      257,  236,  248,  258,  259,  250,  260,  251,  261,  245,
      290,  246,  272,  272,  272,  272,  272,  288,  252,  289,
      259,  255,  289,  258,  290,  257,  256,  261,  273,  273,
      273,  273,  273,  291,  260,  274,  274,  274,  274,  274,
      275,  275,  275,  275,  275,  288,  294,  295,  296,  297,
      273,  298,  299,  300,  301,  302,  303,  304,  291,  307,
      305,  297,  275,  309,  308,  311,  313,  294,  310,  302,
      312,  303,  295,  298,  299,  314,  296,  315,  317,  307,
      311,  300,  308,  301,  310,  316,  318,  304,  305,  315,
      316,  314,  319,  320,  309,  322,  313,  323,  312,  324,

      326,  332,  327,  328,  329,  330,  333,  317,  334,  337,
      323,  336,  335,  320,  318,  327,  326,  328,  356,  324,
      330,  322,  358,  319,  333,  337,  329,  335,  336,  359,
      360,  361,  332,  362,  363,  364,  365,  367,  366,  334,
      368,  358,  369,  360,  372,  373,  374,  375,  356,  376,
      377,  364,  365,  359,  378,  361,  372,  379,  362,  380,
      382,  383,  363,  366,  384,  376,  385,  367,  369,  386,
      368,  379,  374,  373,  388,  391,  375,  387,  393,  390,
      377,  394,  395,  378,  398,  396,  392,  380,  397,  417,
      382,  421,  418,  414,  384,  393,  383,  386,  388,  387,

      385,  390,  392,  419,  397,  391,  414,  394,  418,  398,
      395,  396,  403,  403,  417,  420,  423,  421,  424,  425,
      403,  426,  427,  430,  428,  419,  431,  435,  438,  440,
      424,  420,  441,  445,  442,  427,  428,  450,  448,  425,
      423,  451,  443,  465,  446,  440,  426,  466,  441,  442,
      448,  467,  470,  430,  431,  471,  474,  438,  443,  445,
      444,  444,  435,  444,  446,  450,  472,  473,  465,  451,
      476,  475,  481,  483,  487,  467,  474,  488,  471,  489,
      470,  466,  494,  491,  504,  507,  481,  506,  508,  483,
      472,  509,  473,  475,  510,  494,  476,  512,  511,  488,

      513,  507,  487,  514,  508,  489,  491,  515,  516,  517,
      518,  538,  532,  512,  534,  504,  535,  506,  510,  513,
      541,  509,  511,  514,  516,  517,  557,  556,  534,  518,
      543,  558,  559,  560,  561,  515,  532,  571,  572,  575,
      535,  538,  556,  574,  543,  576,  557,  587,  586,  541,
      589,  588,  597,  560,  561,  598,  600,  621,  559,  607,
      608,  558,  609,  587,  575,  616,  571,  572,  586,  598,
      589,  574,  619,  623,  576,  588,  617,  597,  615,  610,
      608,  600,  621,  607,  606,  605,  609,  603,  602,  601,
      599,  596,  619,  595,  616,  594,  592,  623,  626,  626,

      626,  626,  626,  626,  626,  626,  627,  627,  627,  627,
      627,  627,  627,  627,  628,  628,  628,  628,  628,  628,
      628,  628,  629,  629,  629,  629,  629,  629,  629,  629,
      630,  591,  630,  630,  631,  631,  631,  631,  632,  632,
      633,  590,  585,  633,  633,  633,  633,  633,  634,  584,
      634,  634,  634,  634,  634,  634,  635,  583,  635,  635,
      635,  635,  635,  635,  636,  636,  638,  638,  638,  638,
      639,  639,  640,  640,  640,  640,  641,  641,  642,  642,
      642,  642,  582,  580,  579,  578,  577,  573,  570,  569,
      568,  567,  566,  565,  564,  563,  555,  554,  553,  552,

      551,  550,  549,  548,  546,  545,  544,  542,  540,  539,
      537,  536,  533,  531,  530,  529,  527,  526,  525,  524,
      523,  522,  521,  519,  505,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  493,  490,  486,  485,  484,  482,
      480,  479,  478,  477,  469,  468,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  449,
      447,  439,  437,  436,  434,  433,  432,  429,  422,  416,
      415,  412,  411,  410,  409,  408,  407,  405,  404,  402,
      401,  400,  399,  389,  381,  371,  370,  357,  355,  354,
      353,  352,  351,  350,  346,  345,  344,  343,  342,  341,

      340,  339,  338,  331,  325,  321,  306,  293,  292,  287,
      286,  285,  284,  283,  282,  281,  280,  278,  277,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  254,
      253,  249,  239,  238,  235,  234,  233,  228,  215,  210,
      199,  197,  196,  195,  194,  193,  192,  191,  190,  189,
      180,  179,  178,  177,  176,  174,  173,  172,  171,  108,
      107,  106,  105,  100,   91,   81,   78,   77,   76,   73,
       70,   64,   38,   33,   21,   14,   13,    9,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[158] =
    {   0,
0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer/faustlexer.l"
/* -*- Mode: C++; tab-width: 4; c-basic-offset: 4 -*- */
/* Scanner for the Faust language */
#line 6 "lexer/faustlexer.l"
#include "tree.hh"
#include "faustparser.hpp"
#if defined(WIN32)
#if !defined(__MINGW32__) && !defined(__MSYS__)
// We don't want to include compatibility.hh here, since it pulls in whole lot
// of unneeded stuff which breaks other things, so here's some stuff to make
// MSVC happy.
#include <io.h>
#define isatty _isatty
#define fileno _fileno
#define YY_NO_UNISTD_H
#endif
#else
#include "compatibility.hh"
#include "errormsg.hh"

#define YY_FATAL_ERROR lexerror
#endif

#define register		// suppress the deprecated 'register' warning

#line 982 "lexer/faustlexer.cpp"

#line 984 "lexer/faustlexer.cpp"

#define INITIAL 0
#define comment 1
#define doc 2
#define lst 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 45 "lexer/faustlexer.l"



#line 1206 "lexer/faustlexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 626 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1179 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 48 "lexer/faustlexer.l"
BEGIN(comment);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 "lexer/faustlexer.l"
/* eat anything that's not a '*' 		*/
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 50 "lexer/faustlexer.l"
/* eat up '*'s not followed by '/'s 	*/
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 51 "lexer/faustlexer.l"
/* no need to increment yylineno here 	*/
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 52 "lexer/faustlexer.l"
/* no need to increment yylineno here 	*/
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "lexer/faustlexer.l"
/* no need to increment yylineno here 	*/
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 54 "lexer/faustlexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 56 "lexer/faustlexer.l"
{ BEGIN(doc); return BDOC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 57 "lexer/faustlexer.l"
return DOCCHAR; /* char by char, may be slow ?? */
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 58 "lexer/faustlexer.l"
return DOCCHAR; /* keep newline chars */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 59 "lexer/faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 60 "lexer/faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "lexer/faustlexer.l"
{ BEGIN(lst);		return BLST; } /* autoclosing tag */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "lexer/faustlexer.l"
{ BEGIN(INITIAL); 	return BEQN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "lexer/faustlexer.l"
{ BEGIN(doc); 		return EEQN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "lexer/faustlexer.l"
{ BEGIN(INITIAL); 	return BDGM; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 65 "lexer/faustlexer.l"
{ BEGIN(doc); 		return EDGM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 66 "lexer/faustlexer.l"
{ BEGIN(INITIAL); 	return BMETADATA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "lexer/faustlexer.l"
{ BEGIN(doc); 		return EMETADATA; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 68 "lexer/faustlexer.l"
{ BEGIN(INITIAL); 	return EDOC; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 "lexer/faustlexer.l"
return LSTTRUE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 71 "lexer/faustlexer.l"
return LSTFALSE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 72 "lexer/faustlexer.l"
return LSTDEPENDENCIES;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 73 "lexer/faustlexer.l"
return LSTMDOCTAGS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 74 "lexer/faustlexer.l"
return LSTDISTRIBUTED;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 75 "lexer/faustlexer.l"
return LSTEQ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 76 "lexer/faustlexer.l"
return LSTQ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "lexer/faustlexer.l"
{ BEGIN(doc); 	return ELST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "lexer/faustlexer.l"
return INT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "lexer/faustlexer.l"
return FLOAT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 94 "lexer/faustlexer.l"
return SEQ;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 95 "lexer/faustlexer.l"
return COMMA;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 96 "lexer/faustlexer.l"
return SPLIT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 97 "lexer/faustlexer.l"
return MIX;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 98 "lexer/faustlexer.l"
return MIX;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 99 "lexer/faustlexer.l"
return REC;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "lexer/faustlexer.l"
return ADD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "lexer/faustlexer.l"
return SUB;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "lexer/faustlexer.l"
return MUL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "lexer/faustlexer.l"
return DIV;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "lexer/faustlexer.l"
return MOD;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "lexer/faustlexer.l"
return FDELAY;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "lexer/faustlexer.l"
return DELAY1;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "lexer/faustlexer.l"
return AND;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 110 "lexer/faustlexer.l"
return OR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 111 "lexer/faustlexer.l"
return XOR;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 113 "lexer/faustlexer.l"
return LSH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 114 "lexer/faustlexer.l"
return RSH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "lexer/faustlexer.l"
return LT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "lexer/faustlexer.l"
return LE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "lexer/faustlexer.l"
return GT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "lexer/faustlexer.l"
return GE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "lexer/faustlexer.l"
return EQ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "lexer/faustlexer.l"
return NE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "lexer/faustlexer.l"
return WIRE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 124 "lexer/faustlexer.l"
return CUT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "lexer/faustlexer.l"
return ENDDEF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "lexer/faustlexer.l"
return DEF;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "lexer/faustlexer.l"
return LPAR;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "lexer/faustlexer.l"
return RPAR;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "lexer/faustlexer.l"
return LBRAQ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "lexer/faustlexer.l"
return RBRAQ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "lexer/faustlexer.l"
return LCROC;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "lexer/faustlexer.l"
return RCROC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "lexer/faustlexer.l"
return LAMBDA;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "lexer/faustlexer.l"
return DOT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "lexer/faustlexer.l"
return WITH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "lexer/faustlexer.l"
return LETREC;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "lexer/faustlexer.l"
return WHERE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "lexer/faustlexer.l"
return MEM;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "lexer/faustlexer.l"
return PREFIX;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 144 "lexer/faustlexer.l"
return INTCAST;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 145 "lexer/faustlexer.l"
return FLOATCAST;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 146 "lexer/faustlexer.l"
return ANYCAST;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 148 "lexer/faustlexer.l"
return RDTBL;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 149 "lexer/faustlexer.l"
return RWTBL;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 151 "lexer/faustlexer.l"
return SELECT2;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 152 "lexer/faustlexer.l"
return SELECT3;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 154 "lexer/faustlexer.l"
return FFUNCTION;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 155 "lexer/faustlexer.l"
return FCONSTANT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 156 "lexer/faustlexer.l"
return FVARIABLE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 158 "lexer/faustlexer.l"
return BUTTON;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 159 "lexer/faustlexer.l"
return CHECKBOX;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 160 "lexer/faustlexer.l"
return VSLIDER;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 161 "lexer/faustlexer.l"
return HSLIDER;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 162 "lexer/faustlexer.l"
return NENTRY;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 163 "lexer/faustlexer.l"
return VGROUP;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 164 "lexer/faustlexer.l"
return HGROUP;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 165 "lexer/faustlexer.l"
return TGROUP;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 166 "lexer/faustlexer.l"
return VBARGRAPH;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 167 "lexer/faustlexer.l"
return HBARGRAPH;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 168 "lexer/faustlexer.l"
return SOUNDFILE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 170 "lexer/faustlexer.l"
return ATTACH;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 172 "lexer/faustlexer.l"
return ACOS;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 173 "lexer/faustlexer.l"
return ASIN;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 174 "lexer/faustlexer.l"
return ATAN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 175 "lexer/faustlexer.l"
return ATAN2;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 177 "lexer/faustlexer.l"
return COS;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 178 "lexer/faustlexer.l"
return SIN;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 179 "lexer/faustlexer.l"
return TAN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 181 "lexer/faustlexer.l"
return EXP;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 182 "lexer/faustlexer.l"
return LOG;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 183 "lexer/faustlexer.l"
return LOG10;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 184 "lexer/faustlexer.l"
return POWOP;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 185 "lexer/faustlexer.l"
return POWFUN;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 186 "lexer/faustlexer.l"
return SQRT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 188 "lexer/faustlexer.l"
return ABS;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 189 "lexer/faustlexer.l"
return MIN;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 190 "lexer/faustlexer.l"
return MAX;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 192 "lexer/faustlexer.l"
return FMOD;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 193 "lexer/faustlexer.l"
return REMAINDER;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 195 "lexer/faustlexer.l"
return FLOOR;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 196 "lexer/faustlexer.l"
return CEIL;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 197 "lexer/faustlexer.l"
return RINT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 199 "lexer/faustlexer.l"
return ISEQ;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 200 "lexer/faustlexer.l"
return ITERATE_PARALLEL;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 201 "lexer/faustlexer.l"
return ISUM;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 202 "lexer/faustlexer.l"
return IPROD;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "lexer/faustlexer.l"
return INPUTS;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "lexer/faustlexer.l"
return OUTPUTS;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 207 "lexer/faustlexer.l"
return IMPORT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 208 "lexer/faustlexer.l"
return COMPONENT;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 209 "lexer/faustlexer.l"
return LIBRARY;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 210 "lexer/faustlexer.l"
return ENVIRONMENT;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 212 "lexer/faustlexer.l"
return WAVEFORM;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 213 "lexer/faustlexer.l"
return ROUTE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 214 "lexer/faustlexer.l"
return ENABLE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 215 "lexer/faustlexer.l"
return CONTROL;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 217 "lexer/faustlexer.l"
return DECLARE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 219 "lexer/faustlexer.l"
return CASE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 220 "lexer/faustlexer.l"
return ARROW;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 222 "lexer/faustlexer.l"
return ASSERTBOUNDS;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 223 "lexer/faustlexer.l"
return LOWEST;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 224 "lexer/faustlexer.l"
return HIGHEST;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 226 "lexer/faustlexer.l"
return FLOATMODE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 227 "lexer/faustlexer.l"
return DOUBLEMODE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 228 "lexer/faustlexer.l"
return QUADMODE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 229 "lexer/faustlexer.l"
return FIXEDPOINTMODE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 232 "lexer/faustlexer.l"
return IDENT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 233 "lexer/faustlexer.l"
return IDENT;
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 235 "lexer/faustlexer.l"
return STRING;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 237 "lexer/faustlexer.l"
return TAGSTRING;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 238 "lexer/faustlexer.l"
return TAGSTRING;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 241 "lexer/faustlexer.l"
/* eat up one-line comments */
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 243 "lexer/faustlexer.l"
/* eat up whitespace */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(doc):
case YY_STATE_EOF(lst):
#line 245 "lexer/faustlexer.l"
yyterminate();
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 247 "lexer/faustlexer.l"
printf("extra text is : %s\n", yytext); return EXTRA;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 250 "lexer/faustlexer.l"
ECHO;
	YY_BREAK
#line 2070 "lexer/faustlexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 626 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 626 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 625);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 250 "lexer/faustlexer.l"

int yywrap() { return 1; }

